
i2c_kbd_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c8  080088c8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088d0  080088d0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080088d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb4  20000110  080089e8  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010c4  080089e8  000210c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001191a  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd4  00000000  00000000  00031a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ab  00000000  00000000  000362b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d64  00000000  00000000  0004e75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e08  00000000  00000000  000614bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea2c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000ea318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008850 	.word	0x08008850

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08008850 	.word	0x08008850

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <pressReleaseButton>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pressReleaseButton(uint8_t button, uint8_t pressed)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
	if ( pressed )
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d03a      	beq.n	8000564 <pressReleaseButton+0x8c>
	{
	  if (!buttons[button])
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4a4c      	ldr	r2, [pc, #304]	; (8000624 <pressReleaseButton+0x14c>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d17f      	bne.n	80005f8 <pressReleaseButton+0x120>
	  {
		buttons[button] = 1;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4a4a      	ldr	r2, [pc, #296]	; (8000624 <pressReleaseButton+0x14c>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	54d1      	strb	r1, [r2, r3]
		debounce[button] = HAL_GetTick();
 8000500:	79fc      	ldrb	r4, [r7, #7]
 8000502:	f000 fbe9 	bl	8000cd8 <HAL_GetTick>
 8000506:	4603      	mov	r3, r0
 8000508:	4a47      	ldr	r2, [pc, #284]	; (8000628 <pressReleaseButton+0x150>)
 800050a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if (button & 0x80) //Modifier key
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	da10      	bge.n	8000538 <pressReleaseButton+0x60>
		{
			uint8_t modifierKey = button & 0x7F;
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800051c:	77fb      	strb	r3, [r7, #31]
			if (modifierKey == 0)
 800051e:	7ffb      	ldrb	r3, [r7, #31]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <pressReleaseButton+0x50>
				modifierKey = 0x80;
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	77fb      	strb	r3, [r7, #31]
			USBReport[0] |= modifierKey;
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <pressReleaseButton+0x154>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	7ffb      	ldrb	r3, [r7, #31]
 800052e:	4313      	orrs	r3, r2
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b3e      	ldr	r3, [pc, #248]	; (800062c <pressReleaseButton+0x154>)
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e05f      	b.n	80005f8 <pressReleaseButton+0x120>
		}
		else
		{
			for (int k=3;k<8;k++)
 8000538:	2303      	movs	r3, #3
 800053a:	61bb      	str	r3, [r7, #24]
 800053c:	e00e      	b.n	800055c <pressReleaseButton+0x84>
			{
				if (USBReport[k] == 0)
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <pressReleaseButton+0x154>)
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <pressReleaseButton+0x7e>
				{
					USBReport[k] = button;
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <pressReleaseButton+0x154>)
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	4413      	add	r3, r2
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	701a      	strb	r2, [r3, #0]
					break;
 8000554:	e050      	b.n	80005f8 <pressReleaseButton+0x120>
			for (int k=3;k<8;k++)
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	3301      	adds	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2b07      	cmp	r3, #7
 8000560:	dded      	ble.n	800053e <pressReleaseButton+0x66>
 8000562:	e049      	b.n	80005f8 <pressReleaseButton+0x120>
		}
	  }
	}
	else
	{
	  if (buttons[button])
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4a2f      	ldr	r2, [pc, #188]	; (8000624 <pressReleaseButton+0x14c>)
 8000568:	5cd3      	ldrb	r3, [r2, r3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d044      	beq.n	80005f8 <pressReleaseButton+0x120>
	  {
		buttons[button] = 0;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <pressReleaseButton+0x14c>)
 8000572:	2100      	movs	r1, #0
 8000574:	54d1      	strb	r1, [r2, r3]
		debounce[button] = HAL_GetTick();
 8000576:	79fc      	ldrb	r4, [r7, #7]
 8000578:	f000 fbae 	bl	8000cd8 <HAL_GetTick>
 800057c:	4603      	mov	r3, r0
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <pressReleaseButton+0x150>)
 8000580:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if (button & 0x80) //Modifier key
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	da10      	bge.n	80005ae <pressReleaseButton+0xd6>
		{
			uint8_t modifierKey = button & 0x7F;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000592:	75fb      	strb	r3, [r7, #23]
			if (modifierKey == 0)
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <pressReleaseButton+0xc6>
				modifierKey = 0x80;
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	75fb      	strb	r3, [r7, #23]
			USBReport[0] ^= modifierKey;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <pressReleaseButton+0x154>)
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	4053      	eors	r3, r2
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <pressReleaseButton+0x154>)
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	e024      	b.n	80005f8 <pressReleaseButton+0x120>
		}
		else
		{
			for (int k=2;k<8;k++)
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	e01e      	b.n	80005f2 <pressReleaseButton+0x11a>
			{
				if (USBReport[k] == button)
 80005b4:	4a1d      	ldr	r2, [pc, #116]	; (800062c <pressReleaseButton+0x154>)
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d114      	bne.n	80005ec <pressReleaseButton+0x114>
				{
					for (int l=k;l<7;l++)
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e00b      	b.n	80005e0 <pressReleaseButton+0x108>
					{
						USBReport[l] = USBReport[l+1];
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <pressReleaseButton+0x154>)
 80005ce:	5cd1      	ldrb	r1, [r2, r3]
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <pressReleaseButton+0x154>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
					for (int l=k;l<7;l++)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	ddf0      	ble.n	80005c8 <pressReleaseButton+0xf0>
					}
					USBReport[7] = 0;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <pressReleaseButton+0x154>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	71da      	strb	r2, [r3, #7]
			for (int k=2;k<8;k++)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	3301      	adds	r3, #1
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	dddd      	ble.n	80005b4 <pressReleaseButton+0xdc>
				}
			}
		}
	  }
	}
	if (memcmp(USBReport,lastUSBReport,8) != 0)
 80005f8:	2208      	movs	r2, #8
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <pressReleaseButton+0x158>)
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <pressReleaseButton+0x154>)
 80005fe:	f008 f901 	bl	8008804 <memcmp>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d009      	beq.n	800061c <pressReleaseButton+0x144>
	{
		//USBReport[0] = 2;
		memcpy(lastUSBReport,USBReport,8);
 8000608:	2208      	movs	r2, #8
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <pressReleaseButton+0x154>)
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <pressReleaseButton+0x158>)
 800060e:	f008 f909 	bl	8008824 <memcpy>
		USBD_HID_SendReport(&hUsbDeviceFS, USBReport, 8);
 8000612:	2208      	movs	r2, #8
 8000614:	4905      	ldr	r1, [pc, #20]	; (800062c <pressReleaseButton+0x154>)
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <pressReleaseButton+0x15c>)
 8000618:	f006 f930 	bl	800687c <USBD_HID_SendReport>

	}
}
 800061c:	bf00      	nop
 800061e:	3724      	adds	r7, #36	; 0x24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	20000158 	.word	0x20000158
 8000628:	20000258 	.word	0x20000258
 800062c:	20000654 	.word	0x20000654
 8000630:	20000660 	.word	0x20000660
 8000634:	200006c8 	.word	0x200006c8

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fae6 	bl	8000c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <main+0x68>)
 8000646:	f000 fe56 	bl	80012f6 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <main+0x68>)
 8000650:	f000 fe51 	bl	80012f6 <HAL_GPIO_TogglePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f82a 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f8d4 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065c:	f000 f8a4 	bl	80007a8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000660:	f007 fc86 	bl	8007f70 <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000664:	f000 f88c 	bl	8000780 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000668:	480e      	ldr	r0, [pc, #56]	; (80006a4 <main+0x6c>)
 800066a:	f001 f889 	bl	8001780 <HAL_I2C_EnableListen_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x40>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8000674:	f000 f9c6 	bl	8000a04 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Xfer_Complete)
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <main+0x70>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0fb      	beq.n	8000678 <main+0x40>
	  {
	   if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <main+0x6c>)
 8000682:	f001 f87d 	bl	8001780 <HAL_I2C_EnableListen_IT>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <main+0x5e>
	   {
		 /* Transfer error in reception process */
		 //Error_Handler();
		   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800068c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <main+0x68>)
 8000692:	f000 fe30 	bl	80012f6 <HAL_GPIO_TogglePin>
	   }
	   Xfer_Complete = 0;
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <main+0x70>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
	  if (Xfer_Complete)
 800069c:	e7ec      	b.n	8000678 <main+0x40>
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800
 80006a4:	2000066c 	.word	0x2000066c
 80006a8:	20000130 	.word	0x20000130

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 f8c0 	bl	8008840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemClock_Config+0xd0>)
 80006fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000720:	230f      	movs	r3, #15
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000724:	2390      	movs	r3, #144	; 0x90
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800072c:	2305      	movs	r3, #5
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fe59 	bl	80043ec <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 f960 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f004 f8bb 	bl	80048dc <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800076c:	f000 f94a 	bl	8000a04 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	201f      	movs	r0, #31
 800078a:	f000 fbb0 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800078e:	201f      	movs	r0, #31
 8000790:	f000 fbc9 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2043      	movs	r0, #67	; 0x43
 800079a:	f000 fba8 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800079e:	2043      	movs	r0, #67	; 0x43
 80007a0:	f000 fbc1 	bl	8000f26 <HAL_NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f000 fda1 	bl	800132c <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f908 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000066c 	.word	0x2000066c
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xb8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_GPIO_Init+0xb8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xb8>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000892:	f000 fd17 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_LED_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xbc>)
 80008b0:	f000 fb84 	bl	8000fbc <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800

080008c4 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
  aTxBuffer[0]++;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008dc:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]++;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008e8:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]++;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008f4:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]++;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008f8:	78db      	ldrb	r3, [r3, #3]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 8000900:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_I2C_SlaveTxCpltCallback+0x58>)
 8000908:	f000 fcf5 	bl	80012f6 <HAL_GPIO_TogglePin>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000130 	.word	0x20000130
 8000918:	20000134 	.word	0x20000134
 800091c:	40020800 	.word	0x40020800

08000920 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */
  if (aRxBuffer[0] == 'k') // Keyboard
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b6b      	cmp	r3, #107	; 0x6b
 800092e:	d109      	bne.n	8000944 <HAL_I2C_SlaveRxCpltCallback+0x24>
  {
	  struct gameport_kb_data *data = (struct gameport_kb_data*)aRxBuffer;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8000932:	60fb      	str	r3, [r7, #12]
	  pressReleaseButton(data->key, data->pressed);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	785a      	ldrb	r2, [r3, #1]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff fdca 	bl	80004d8 <pressReleaseButton>
  else if (aRxBuffer[0] == 'm') // Mouse
  {

  }
  //printf("Received: %s\n",aRxBuffer);
  Xfer_Complete = 1;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000138 	.word	0x20000138
 8000958:	20000130 	.word	0x20000130

0800095c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
 8000968:	4613      	mov	r3, r2
 800096a:	803b      	strh	r3, [r7, #0]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  Transfer_Direction = TransferDirection;
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <HAL_I2C_AddrCallback+0x64>)
 8000970:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction == 0)
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_I2C_AddrCallback+0x64>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10b      	bne.n	8000992 <HAL_I2C_AddrCallback+0x36>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800097a:	2308      	movs	r3, #8
 800097c:	2204      	movs	r2, #4
 800097e:	4911      	ldr	r1, [pc, #68]	; (80009c4 <HAL_I2C_AddrCallback+0x68>)
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <HAL_I2C_AddrCallback+0x6c>)
 8000982:	f000 fe17 	bl	80015b4 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d014      	beq.n	80009b6 <HAL_I2C_AddrCallback+0x5a>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 800098c:	f000 f83a 	bl	8000a04 <Error_Handler>
	  HAL_I2C_EnableListen_IT(&hi2c1);
  }

  }

}
 8000990:	e011      	b.n	80009b6 <HAL_I2C_AddrCallback+0x5a>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, sizeof(struct gameport_kb_data), I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000992:	2308      	movs	r3, #8
 8000994:	2203      	movs	r2, #3
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <HAL_I2C_AddrCallback+0x70>)
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_I2C_AddrCallback+0x6c>)
 800099a:	f000 fe7e 	bl	800169a <HAL_I2C_Slave_Seq_Receive_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <HAL_I2C_AddrCallback+0x4e>
    Error_Handler();
 80009a4:	f000 f82e 	bl	8000a04 <Error_Handler>
}
 80009a8:	e005      	b.n	80009b6 <HAL_I2C_AddrCallback+0x5a>
	  HAL_I2C_SlaveRxCpltCallback(&hi2c1);
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <HAL_I2C_AddrCallback+0x6c>)
 80009ac:	f7ff ffb8 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
	  HAL_I2C_EnableListen_IT(&hi2c1);
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_I2C_AddrCallback+0x6c>)
 80009b2:	f000 fee5 	bl	8001780 <HAL_I2C_EnableListen_IT>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000012c 	.word	0x2000012c
 80009c4:	20000134 	.word	0x20000134
 80009c8:	2000066c 	.word	0x2000066c
 80009cc:	20000138 	.word	0x20000138

080009d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f001 f8a0 	bl	8001b32 <HAL_I2C_GetError>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d001      	beq.n	80009fc <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80009f8:	f000 f804 	bl	8000a04 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4801      	ldr	r0, [pc, #4]	; (8000a18 <Error_Handler+0x14>)
 8000a12:	f000 fc70 	bl	80012f6 <HAL_GPIO_TogglePin>
 8000a16:	e7f9      	b.n	8000a0c <Error_Handler+0x8>
 8000a18:	40020800 	.word	0x40020800

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_MspInit+0x58>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_MspInit+0x58>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x58>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x58>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_MspInit+0x58>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x58>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f000 fa45 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f000 fa5e 	bl	8000f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23c0      	movs	r3, #192	; 0xc0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad2:	f000 fa73 	bl	8000fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f8ac 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <I2C1_EV_IRQHandler+0x10>)
 8000b72:	f000 fe3b 	bl	80017ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000066c 	.word	0x2000066c

08000b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <OTG_FS_IRQHandler+0x10>)
 8000b86:	f002 fb1c 	bl	80031c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000ba4 	.word	0x20000ba4

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f007 fde9 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fd25 	bl	8000638 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000bfc:	080088d8 	.word	0x080088d8
  ldr r2, =_sbss
 8000c00:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000c04:	200010c4 	.word	0x200010c4

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f94f 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff feec 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f967 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f92f 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200006c0 	.word	0x200006c0

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200006c0 	.word	0x200006c0

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d004      	beq.n	8000f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e00c      	b.n	8000f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fac:	b2db      	uxtb	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43d9      	mvns	r1, r3
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	400b      	ands	r3, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e12b      	b.n	8001596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fb90 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800138e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001390:	f003 fc5c 	bl	8004c4c <HAL_RCC_GetPCLK1Freq>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a81      	ldr	r2, [pc, #516]	; (80015a0 <HAL_I2C_Init+0x274>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d807      	bhi.n	80013b0 <HAL_I2C_Init+0x84>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a80      	ldr	r2, [pc, #512]	; (80015a4 <HAL_I2C_Init+0x278>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	e006      	b.n	80013be <HAL_I2C_Init+0x92>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4a7d      	ldr	r2, [pc, #500]	; (80015a8 <HAL_I2C_Init+0x27c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	bf94      	ite	ls
 80013b8:	2301      	movls	r3, #1
 80013ba:	2300      	movhi	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0e7      	b.n	8001596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a78      	ldr	r2, [pc, #480]	; (80015ac <HAL_I2C_Init+0x280>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <HAL_I2C_Init+0x274>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d802      	bhi.n	8001400 <HAL_I2C_Init+0xd4>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3301      	adds	r3, #1
 80013fe:	e009      	b.n	8001414 <HAL_I2C_Init+0xe8>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a69      	ldr	r2, [pc, #420]	; (80015b0 <HAL_I2C_Init+0x284>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	495c      	ldr	r1, [pc, #368]	; (80015a0 <HAL_I2C_Init+0x274>)
 8001430:	428b      	cmp	r3, r1
 8001432:	d819      	bhi.n	8001468 <HAL_I2C_Init+0x13c>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e59      	subs	r1, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001448:	400b      	ands	r3, r1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <HAL_I2C_Init+0x138>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e59      	subs	r1, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fbb1 f3f3 	udiv	r3, r1, r3
 800145c:	3301      	adds	r3, #1
 800145e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001462:	e051      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 8001464:	2304      	movs	r3, #4
 8001466:	e04f      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d111      	bne.n	8001494 <HAL_I2C_Init+0x168>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e58      	subs	r0, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6859      	ldr	r1, [r3, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	e012      	b.n	80014ba <HAL_I2C_Init+0x18e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e58      	subs	r0, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	0099      	lsls	r1, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Init+0x196>
 80014be:	2301      	movs	r3, #1
 80014c0:	e022      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10e      	bne.n	80014e8 <HAL_I2C_Init+0x1bc>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e58      	subs	r0, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	440b      	add	r3, r1
 80014d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e6:	e00f      	b.n	8001508 <HAL_I2C_Init+0x1dc>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6809      	ldr	r1, [r1, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6911      	ldr	r1, [r2, #16]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68d2      	ldr	r2, [r2, #12]
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	000186a0 	.word	0x000186a0
 80015a4:	001e847f 	.word	0x001e847f
 80015a8:	003d08ff 	.word	0x003d08ff
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80015d0:	2b28      	cmp	r3, #40	; 0x28
 80015d2:	d15b      	bne.n	800168c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e054      	b.n	800168e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e04d      	b.n	800168e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d007      	beq.n	8001618 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2229      	movs	r2, #41	; 0x29
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001686:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800168c:	2302      	movs	r3, #2
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016b6:	2b28      	cmp	r3, #40	; 0x28
 80016b8:	d15b      	bne.n	8001772 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e054      	b.n	8001774 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e04d      	b.n	8001774 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d007      	beq.n	80016fe <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	222a      	movs	r2, #42	; 0x2a
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800176c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001772:	2302      	movs	r3, #2
  }
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b20      	cmp	r3, #32
 8001792:	d124      	bne.n	80017de <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2228      	movs	r2, #40	; 0x28
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d007      	beq.n	80017ba <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017c8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80017d8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800180c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2b10      	cmp	r3, #16
 800181a:	d003      	beq.n	8001824 <HAL_I2C_EV_IRQHandler+0x38>
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	f040 80c1 	bne.w	80019a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <HAL_I2C_EV_IRQHandler+0x6e>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001844:	d003      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0x62>
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800184c:	d101      	bne.n	8001852 <HAL_I2C_EV_IRQHandler+0x66>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_I2C_EV_IRQHandler+0x68>
 8001852:	2300      	movs	r3, #0
 8001854:	2b01      	cmp	r3, #1
 8001856:	f000 8132 	beq.w	8001abe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_I2C_EV_IRQHandler+0x92>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	0a5b      	lsrs	r3, r3, #9
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 fb3b 	bl	8002eec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fcb2 	bl	80021e0 <I2C_Master_SB>
 800187c:	e092      	b.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_I2C_EV_IRQHandler+0xb2>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	0a5b      	lsrs	r3, r3, #9
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fd28 	bl	80022ec <I2C_Master_ADD10>
 800189c:	e082      	b.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0xd2>
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	0a5b      	lsrs	r3, r3, #9
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fd42 	bl	8002340 <I2C_Master_ADDR>
 80018bc:	e072      	b.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03b      	beq.n	8001942 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d8:	f000 80f3 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	09db      	lsrs	r3, r3, #7
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00f      	beq.n	8001908 <HAL_I2C_EV_IRQHandler+0x11c>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_I2C_EV_IRQHandler+0x11c>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f922 	bl	8001b4a <I2C_MasterTransmit_TXE>
 8001906:	e04d      	b.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80d6 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	0a5b      	lsrs	r3, r3, #9
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80cf 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	2b21      	cmp	r3, #33	; 0x21
 8001928:	d103      	bne.n	8001932 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9a9 	bl	8001c82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001930:	e0c7      	b.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b40      	cmp	r3, #64	; 0x40
 8001936:	f040 80c4 	bne.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fa17 	bl	8001d6e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001940:	e0bf      	b.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001950:	f000 80b7 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00f      	beq.n	8001980 <HAL_I2C_EV_IRQHandler+0x194>
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <HAL_I2C_EV_IRQHandler+0x194>
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fa8c 	bl	8001e96 <I2C_MasterReceive_RXNE>
 800197e:	e011      	b.n	80019a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 809a 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	0a5b      	lsrs	r3, r3, #9
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8093 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fb35 	bl	800200c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a2:	e08e      	b.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019a4:	e08d      	b.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e007      	b.n	80019c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d012      	beq.n	80019fa <HAL_I2C_EV_IRQHandler+0x20e>
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fef3 	bl	80027de <I2C_Slave_ADDR>
 80019f8:	e066      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_I2C_EV_IRQHandler+0x22e>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	0a5b      	lsrs	r3, r3, #9
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 ff2e 	bl	8002874 <I2C_Slave_STOPF>
 8001a18:	e056      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	2b21      	cmp	r3, #33	; 0x21
 8001a1e:	d002      	beq.n	8001a26 <HAL_I2C_EV_IRQHandler+0x23a>
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	2b29      	cmp	r3, #41	; 0x29
 8001a24:	d125      	bne.n	8001a72 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	09db      	lsrs	r3, r3, #7
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00f      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0x266>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	0a9b      	lsrs	r3, r3, #10
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0x266>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fe09 	bl	8002662 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a50:	e039      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d033      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	0a5b      	lsrs	r3, r3, #9
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02d      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fe36 	bl	80026dc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a70:	e029      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00f      	beq.n	8001a9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	0a9b      	lsrs	r3, r3, #10
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fe41 	bl	800271e <I2C_SlaveReceive_RXNE>
 8001a9c:	e014      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	0a5b      	lsrs	r3, r3, #9
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fe6f 	bl	800279a <I2C_SlaveReceive_BTF>
 8001abc:	e004      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ac6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d150      	bne.n	8001c12 <I2C_MasterTransmit_TXE+0xc8>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b21      	cmp	r3, #33	; 0x21
 8001b74:	d14d      	bne.n	8001c12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d01d      	beq.n	8001bb8 <I2C_MasterTransmit_TXE+0x6e>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d01a      	beq.n	8001bb8 <I2C_MasterTransmit_TXE+0x6e>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b88:	d016      	beq.n	8001bb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2211      	movs	r2, #17
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff8c 	bl	8001ace <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bb6:	e060      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bc6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d107      	bne.n	8001c02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff7b 	bl	8001af6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c00:	e03b      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff5f 	bl	8001ace <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c10:	e033      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b21      	cmp	r3, #33	; 0x21
 8001c16:	d005      	beq.n	8001c24 <I2C_MasterTransmit_TXE+0xda>
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d12d      	bne.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b22      	cmp	r3, #34	; 0x22
 8001c22:	d12a      	bne.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c3e:	e01c      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	d103      	bne.n	8001c54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f88e 	bl	8001d6e <I2C_MemoryTransmit_TXE_BTF>
}
 8001c52:	e012      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c78:	e7ff      	b.n	8001c7a <I2C_MasterTransmit_TXE+0x130>
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b21      	cmp	r3, #33	; 0x21
 8001c9a:	d164      	bne.n	8001d66 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001cca:	e04c      	b.n	8001d66 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d01d      	beq.n	8001d0e <I2C_MasterTransmit_BTF+0x8c>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d01a      	beq.n	8001d0e <I2C_MasterTransmit_BTF+0x8c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cde:	d016      	beq.n	8001d0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2211      	movs	r2, #17
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fee1 	bl	8001ace <HAL_I2C_MasterTxCpltCallback>
}
 8001d0c:	e02b      	b.n	8001d66 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b40      	cmp	r3, #64	; 0x40
 8001d46:	d107      	bne.n	8001d58 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fed0 	bl	8001af6 <HAL_I2C_MemTxCpltCallback>
}
 8001d56:	e006      	b.n	8001d66 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff feb4 	bl	8001ace <HAL_I2C_MasterTxCpltCallback>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11d      	bne.n	8001dc2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10b      	bne.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9e:	1c9a      	adds	r2, r3, #2
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001da4:	e073      	b.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	121b      	asrs	r3, r3, #8
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dc0:	e065      	b.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10b      	bne.n	8001de2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001de0:	e055      	b.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d151      	bne.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b22      	cmp	r3, #34	; 0x22
 8001dee:	d10d      	bne.n	8001e0c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e0a:	e040      	b.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b21      	cmp	r3, #33	; 0x21
 8001e1a:	d112      	bne.n	8001e42 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e40:	e025      	b.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d120      	bne.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b21      	cmp	r3, #33	; 0x21
 8001e50:	d11d      	bne.n	8001e8e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e60:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e70:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fe34 	bl	8001af6 <HAL_I2C_MemTxCpltCallback>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b22      	cmp	r3, #34	; 0x22
 8001ea8:	f040 80ac 	bne.w	8002004 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d921      	bls.n	8001efe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	f040 808c 	bne.w	8002004 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001efc:	e082      	b.n	8002004 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d075      	beq.n	8001ff2 <I2C_MasterReceive_RXNE+0x15c>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d002      	beq.n	8001f12 <I2C_MasterReceive_RXNE+0x7c>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d16f      	bne.n	8001ff2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ffb8 	bl	8002e88 <I2C_WaitOnSTOPRequestThroughIT>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d142      	bne.n	8001fa4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d10a      	bne.n	8001f8e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fdbf 	bl	8001b0a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f8c:	e03a      	b.n	8002004 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2212      	movs	r2, #18
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fda0 	bl	8001ae2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fa2:	e02f      	b.n	8002004 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fcfa 	bl	80009e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ff0:	e008      	b.n	8002004 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002000:	605a      	str	r2, [r3, #4]
}
 8002002:	e7ff      	b.n	8002004 <I2C_MasterReceive_RXNE+0x16e>
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11b      	bne.n	800205c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002032:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800205a:	e0bd      	b.n	80021d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d129      	bne.n	80020ba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002074:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00a      	beq.n	8002092 <I2C_MasterReceive_BTF+0x86>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d007      	beq.n	8002092 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002090:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020b8:	e08e      	b.n	80021d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d176      	bne.n	80021b2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d002      	beq.n	80020d0 <I2C_MasterReceive_BTF+0xc4>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d108      	bne.n	80020e2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e019      	b.n	8002116 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d002      	beq.n	80020ee <I2C_MasterReceive_BTF+0xe2>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d108      	bne.n	8002100 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e00a      	b.n	8002116 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b10      	cmp	r3, #16
 8002104:	d007      	beq.n	8002116 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002114:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002170:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d10a      	bne.n	800219c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fcb8 	bl	8001b0a <HAL_I2C_MemRxCpltCallback>
}
 800219a:	e01d      	b.n	80021d8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2212      	movs	r2, #18
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fc99 	bl	8001ae2 <HAL_I2C_MasterRxCpltCallback>
}
 80021b0:	e012      	b.n	80021d8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d117      	bne.n	8002224 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800220c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800220e:	e067      	b.n	80022e0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	e05d      	b.n	80022e0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222c:	d133      	bne.n	8002296 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b21      	cmp	r3, #33	; 0x21
 8002238:	d109      	bne.n	800224e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	e008      	b.n	8002260 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <I2C_Master_SB+0x92>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <I2C_Master_SB+0x100>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02d      	beq.n	80022e0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
}
 8002294:	e024      	b.n	80022e0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10e      	bne.n	80022bc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	11db      	asrs	r3, r3, #7
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f003 0306 	and.w	r3, r3, #6
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f063 030f 	orn	r3, r3, #15
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]
}
 80022ba:	e011      	b.n	80022e0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10d      	bne.n	80022e0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	11db      	asrs	r3, r3, #7
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 0306 	and.w	r3, r3, #6
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f063 030e 	orn	r3, r3, #14
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <I2C_Master_ADD10+0x26>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <I2C_Master_ADD10+0x48>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002340:	b480      	push	{r7}
 8002342:	b091      	sub	sp, #68	; 0x44
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800234e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b22      	cmp	r3, #34	; 0x22
 8002368:	f040 8169 	bne.w	800263e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <I2C_Master_ADDR+0x54>
 8002374:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d10b      	bne.n	8002394 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	e160      	b.n	8002656 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_Master_ADDR+0x98>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023a4:	d118      	bne.n	80023d8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
 80023d6:	e13e      	b.n	8002656 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d113      	bne.n	800240a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e115      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	f040 808a 	bne.w	800252a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800241c:	d137      	bne.n	800248e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243c:	d113      	bne.n	8002466 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	e0e7      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e0d3      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	2b08      	cmp	r3, #8
 8002492:	d02e      	beq.n	80024f2 <I2C_Master_ADDR+0x1b2>
 8002494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002496:	2b20      	cmp	r3, #32
 8002498:	d02b      	beq.n	80024f2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	2b12      	cmp	r3, #18
 800249e:	d102      	bne.n	80024a6 <I2C_Master_ADDR+0x166>
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d125      	bne.n	80024f2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00e      	beq.n	80024ca <I2C_Master_ADDR+0x18a>
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d00b      	beq.n	80024ca <I2C_Master_ADDR+0x18a>
 80024b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d008      	beq.n	80024ca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e007      	b.n	80024da <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	e0a1      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002500:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e085      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d14d      	bne.n	80025d0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	2b04      	cmp	r3, #4
 8002538:	d016      	beq.n	8002568 <I2C_Master_ADDR+0x228>
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	2b02      	cmp	r3, #2
 800253e:	d013      	beq.n	8002568 <I2C_Master_ADDR+0x228>
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	2b10      	cmp	r3, #16
 8002544:	d010      	beq.n	8002568 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002576:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002586:	d117      	bne.n	80025b8 <I2C_Master_ADDR+0x278>
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800258e:	d00b      	beq.n	80025a8 <I2C_Master_ADDR+0x268>
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	2b01      	cmp	r3, #1
 8002594:	d008      	beq.n	80025a8 <I2C_Master_ADDR+0x268>
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	2b08      	cmp	r3, #8
 800259a:	d005      	beq.n	80025a8 <I2C_Master_ADDR+0x268>
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d002      	beq.n	80025a8 <I2C_Master_ADDR+0x268>
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d107      	bne.n	80025b8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	e032      	b.n	8002636 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025de:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ee:	d117      	bne.n	8002620 <I2C_Master_ADDR+0x2e0>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f6:	d00b      	beq.n	8002610 <I2C_Master_ADDR+0x2d0>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d008      	beq.n	8002610 <I2C_Master_ADDR+0x2d0>
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	2b08      	cmp	r3, #8
 8002602:	d005      	beq.n	8002610 <I2C_Master_ADDR+0x2d0>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b10      	cmp	r3, #16
 8002608:	d002      	beq.n	8002610 <I2C_Master_ADDR+0x2d0>
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2b20      	cmp	r3, #32
 800260e:	d107      	bne.n	8002620 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800261e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800263c:	e00b      	b.n	8002656 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	e7ff      	b.n	8002656 <I2C_Master_ADDR+0x316>
 8002656:	bf00      	nop
 8002658:	3744      	adds	r7, #68	; 0x44
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02b      	beq.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d114      	bne.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b29      	cmp	r3, #41	; 0x29
 80026ae:	d111      	bne.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2221      	movs	r2, #33	; 0x21
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2228      	movs	r2, #40	; 0x28
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe f8f8 	bl	80008c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02c      	beq.n	8002792 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d114      	bne.n	8002792 <I2C_SlaveReceive_RXNE+0x74>
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b2a      	cmp	r3, #42	; 0x2a
 800276c:	d111      	bne.n	8002792 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2222      	movs	r2, #34	; 0x22
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2228      	movs	r2, #40	; 0x28
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe f8c7 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d012      	beq.n	80027d2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f8:	2b28      	cmp	r3, #40	; 0x28
 80027fa:	d127      	bne.n	800284c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	09db      	lsrs	r3, r3, #7
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	81bb      	strh	r3, [r7, #12]
 800282e:	e002      	b.n	8002836 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800283e:	89ba      	ldrh	r2, [r7, #12]
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe f889 	bl	800095c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800284a:	e00e      	b.n	800286a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002892:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d0:	d172      	bne.n	80029b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b22      	cmp	r3, #34	; 0x22
 80028d6:	d002      	beq.n	80028de <I2C_Slave_STOPF+0x6a>
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b2a      	cmp	r3, #42	; 0x2a
 80028dc:	d135      	bne.n	800294a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f043 0204 	orr.w	r2, r3, #4
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002910:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb41 	bl	8000f9e <HAL_DMA_GetState>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d049      	beq.n	80029b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a69      	ldr	r2, [pc, #420]	; (8002acc <I2C_Slave_STOPF+0x258>)
 8002928:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fb13 	bl	8000f5a <HAL_DMA_Abort_IT>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03d      	beq.n	80029b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002944:	4610      	mov	r0, r2
 8002946:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002948:	e035      	b.n	80029b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fb0b 	bl	8000f9e <HAL_DMA_GetState>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d014      	beq.n	80029b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <I2C_Slave_STOPF+0x258>)
 8002994:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fadd 	bl	8000f5a <HAL_DMA_Abort_IT>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029b0:	4610      	mov	r0, r2
 80029b2:	4798      	blx	r3
 80029b4:	e000      	b.n	80029b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03e      	beq.n	8002a40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d112      	bne.n	80029f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d112      	bne.n	8002a2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f843 	bl	8002ad4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a4e:	e039      	b.n	8002ac4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b2a      	cmp	r3, #42	; 0x2a
 8002a54:	d109      	bne.n	8002a6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2228      	movs	r2, #40	; 0x28
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fd ff5b 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b28      	cmp	r3, #40	; 0x28
 8002a74:	d111      	bne.n	8002a9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <I2C_Slave_STOPF+0x25c>)
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd ff9c 	bl	80009d0 <HAL_I2C_ListenCpltCallback>
}
 8002a98:	e014      	b.n	8002ac4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	d002      	beq.n	8002aa8 <I2C_Slave_STOPF+0x234>
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b22      	cmp	r3, #34	; 0x22
 8002aa6:	d10d      	bne.n	8002ac4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd ff2e 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	08002d39 	.word	0x08002d39
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d002      	beq.n	8002af8 <I2C_ITError+0x24>
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d10a      	bne.n	8002b0e <I2C_ITError+0x3a>
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b22      	cmp	r3, #34	; 0x22
 8002afc:	d107      	bne.n	8002b0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b14:	2b28      	cmp	r3, #40	; 0x28
 8002b16:	d107      	bne.n	8002b28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2228      	movs	r2, #40	; 0x28
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b26:	e015      	b.n	8002b54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b36:	d00a      	beq.n	8002b4e <I2C_ITError+0x7a>
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b60      	cmp	r3, #96	; 0x60
 8002b3c:	d007      	beq.n	8002b4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b62:	d162      	bne.n	8002c2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d020      	beq.n	8002bc4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <I2C_ITError+0x25c>)
 8002b88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f9e3 	bl	8000f5a <HAL_DMA_Abort_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8089 	beq.w	8002cae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4798      	blx	r3
 8002bc2:	e074      	b.n	8002cae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <I2C_ITError+0x25c>)
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe f9c2 	bl	8000f5a <HAL_DMA_Abort_IT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d068      	beq.n	8002cae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d10b      	bne.n	8002c02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
 8002c28:	e041      	b.n	8002cae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b60      	cmp	r3, #96	; 0x60
 8002c34:	d125      	bne.n	8002c82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d10b      	bne.n	8002c6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe ff4f 	bl	8001b1e <HAL_I2C_AbortCpltCallback>
 8002c80:	e015      	b.n	8002cae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d10b      	bne.n	8002ca8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fe9b 	bl	80009e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d113      	bne.n	8002d28 <I2C_ITError+0x254>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b28      	cmp	r3, #40	; 0x28
 8002d04:	d110      	bne.n	8002d28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <I2C_ITError+0x260>)
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fe54 	bl	80009d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	ffff0000 	.word	0xffff0000

08002d38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d52:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <I2C_DMAAbort+0x148>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	08db      	lsrs	r3, r3, #3
 8002d58:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <I2C_DMAAbort+0x14c>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0a1a      	lsrs	r2, r3, #8
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00da      	lsls	r2, r3, #3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002d7e:	e00a      	b.n	8002d96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d94:	d0ea      	beq.n	8002d6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2200      	movs	r2, #0
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	2200      	movs	r2, #0
 8002dda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d10e      	bne.n	8002e26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7fe fe7d 	bl	8001b1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e24:	e027      	b.n	8002e76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e2c:	2b28      	cmp	r3, #40	; 0x28
 8002e2e:	d117      	bne.n	8002e60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2228      	movs	r2, #40	; 0x28
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e5e:	e007      	b.n	8002e70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f7fd fdb7 	bl	80009e4 <HAL_I2C_ErrorCallback>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000
 8002e84:	14f8b589 	.word	0x14f8b589

08002e88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0a1a      	lsrs	r2, r3, #8
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e008      	b.n	8002ed8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d0e9      	beq.n	8002eaa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	14f8b589 	.word	0x14f8b589

08002eec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002efc:	d103      	bne.n	8002f06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f04:	e007      	b.n	8002f16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f0e:	d102      	bne.n	8002f16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2208      	movs	r2, #8
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f24:	b08f      	sub	sp, #60	; 0x3c
 8002f26:	af0a      	add	r7, sp, #40	; 0x28
 8002f28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e10f      	b.n	8003154 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 f944 	bl	80081dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2203      	movs	r2, #3
 8002f58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 ff93 	bl	8004e9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	687e      	ldr	r6, [r7, #4]
 8002f80:	466d      	mov	r5, sp
 8002f82:	f106 0410 	add.w	r4, r6, #16
 8002f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f96:	1d33      	adds	r3, r6, #4
 8002f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9a:	6838      	ldr	r0, [r7, #0]
 8002f9c:	f001 fe6a 	bl	8004c74 <USB_CoreInit>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0d0      	b.n	8003154 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 ff81 	bl	8004ec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	e04a      	b.n	800305a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	333d      	adds	r3, #61	; 0x3d
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	333c      	adds	r3, #60	; 0x3c
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	b298      	uxth	r0, r3
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3344      	adds	r3, #68	; 0x44
 8003000:	4602      	mov	r2, r0
 8003002:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3340      	adds	r3, #64	; 0x40
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3348      	adds	r3, #72	; 0x48
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334c      	adds	r3, #76	; 0x4c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3354      	adds	r3, #84	; 0x54
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3af      	bcc.n	8002fc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e044      	b.n	80030f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3b5      	bcc.n	800306a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	687e      	ldr	r6, [r7, #4]
 8003106:	466d      	mov	r5, sp
 8003108:	f106 0410 	add.w	r4, r6, #16
 800310c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003118:	e885 0003 	stmia.w	r5, {r0, r1}
 800311c:	1d33      	adds	r3, r6, #4
 800311e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	f001 ff19 	bl	8004f58 <USB_DevInit>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e00d      	b.n	8003154 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f003 f868 	bl	8006222 <USB_DevDisconnect>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800315c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_PCD_Start+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e020      	b.n	80031ba <HAL_PCD_Start+0x5e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2b01      	cmp	r3, #1
 8003186:	d109      	bne.n	800319c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800318c:	2b01      	cmp	r3, #1
 800318e:	d005      	beq.n	800319c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fe6b 	bl	8004e7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 f818 	bl	80061e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031c2:	b590      	push	{r4, r7, lr}
 80031c4:	b08d      	sub	sp, #52	; 0x34
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 f8d6 	bl	800638a <USB_GetMode>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 848a 	bne.w	8003afa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 f83a 	bl	8006264 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8480 	beq.w	8003af8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 f827 	bl	8006264 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d107      	bne.n	8003230 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f002 0202 	and.w	r2, r2, #2
 800322e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 f815 	bl	8006264 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b10      	cmp	r3, #16
 8003242:	d161      	bne.n	8003308 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	0c5b      	lsrs	r3, r3, #17
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2b02      	cmp	r3, #2
 800327e:	d124      	bne.n	80032ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d035      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6a38      	ldr	r0, [r7, #32]
 80032a0:	f002 fe4c 	bl	8005f3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	441a      	add	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c2:	441a      	add	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
 80032c8:	e016      	b.n	80032f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	0c5b      	lsrs	r3, r3, #17
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d110      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032dc:	2208      	movs	r2, #8
 80032de:	4619      	mov	r1, r3
 80032e0:	6a38      	ldr	r0, [r7, #32]
 80032e2:	f002 fe2b 	bl	8005f3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f2:	441a      	add	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0210 	orr.w	r2, r2, #16
 8003306:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f002 ffa9 	bl	8006264 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003318:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800331c:	f040 80a7 	bne.w	800346e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f002 ffae 	bl	800628a <USB_ReadDevAllOutEpInterrupt>
 800332e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003330:	e099      	b.n	8003466 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 808e 	beq.w	800345a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f002 ffd2 	bl	80062f2 <USB_ReadDevOutEPInterrupt>
 800334e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	461a      	mov	r2, r3
 8003368:	2301      	movs	r3, #1
 800336a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800336c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 feaa 	bl	80040c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	2308      	movs	r3, #8
 800338e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ff80 	bl	8004298 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	2310      	movs	r3, #16
 80033b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d030      	beq.n	8003420 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d109      	bne.n	80033de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	78db      	ldrb	r3, [r3, #3]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d108      	bne.n	800340e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f004 ffdb 	bl	80083c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	2302      	movs	r3, #2
 800341e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2320      	movs	r3, #32
 800343a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003458:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	3301      	adds	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af62 	bne.w	8003332 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fef6 	bl	8006264 <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003482:	f040 80db 	bne.w	800363c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 ff17 	bl	80062be <USB_ReadDevAllInEpInterrupt>
 8003490:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003496:	e0cd      	b.n	8003634 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80c2 	beq.w	8003628 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 ff3d 	bl	800632e <USB_ReadDevInEPInterrupt>
 80034b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d057      	beq.n	8003570 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	2201      	movs	r2, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e0:	4013      	ands	r3, r2
 80034e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f0:	461a      	mov	r2, r3
 80034f2:	2301      	movs	r3, #1
 80034f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d132      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334c      	adds	r3, #76	; 0x4c
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	3348      	adds	r3, #72	; 0x48
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4419      	add	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4403      	add	r3, r0
 8003532:	334c      	adds	r3, #76	; 0x4c
 8003534:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d113      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3354      	adds	r3, #84	; 0x54
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800355c:	461a      	mov	r2, r3
 800355e:	2101      	movs	r1, #1
 8003560:	f002 ff44 	bl	80063ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f004 feaf 	bl	80082ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	2308      	movs	r3, #8
 800358a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	2310      	movs	r3, #16
 80035a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d023      	beq.n	8003616 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d0:	6a38      	ldr	r0, [r7, #32]
 80035d2:	f001 fe25 	bl	8005220 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3338      	adds	r3, #56	; 0x38
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	78db      	ldrb	r3, [r3, #3]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f004 fef2 	bl	80083e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2302      	movs	r3, #2
 8003614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fcc3 	bl	8003fae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	3301      	adds	r3, #1
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	f47f af2e 	bne.w	8003498 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fe0f 	bl	8006264 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003650:	d122      	bne.n	8003698 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003678:	2100      	movs	r1, #0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 feaa 	bl	80043d4 <HAL_PCDEx_LPM_Callback>
 8003680:	e002      	b.n	8003688 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f004 fe90 	bl	80083a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fde1 	bl	8006264 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ac:	d112      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f004 fe4c 	bl	800835c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fdc3 	bl	8006264 <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	f040 80b7 	bne.w	800385a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2110      	movs	r1, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fd8a 	bl	8005220 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003710:	e046      	b.n	80037a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003724:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003744:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	461a      	mov	r2, r3
 8003754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003758:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003778:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003798:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	3301      	adds	r3, #1
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3b3      	bcc.n	8003712 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d6:	f043 030b 	orr.w	r3, r3, #11
 80037da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ec:	f043 030b 	orr.w	r3, r3, #11
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	e015      	b.n	8003820 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003806:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800380a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381a:	f043 030b 	orr.w	r3, r3, #11
 800381e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003832:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003844:	461a      	mov	r2, r3
 8003846:	f002 fdd1 	bl	80063ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fd00 	bl	8006264 <USB_ReadInterrupts>
 8003864:	4603      	mov	r3, r0
 8003866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	d124      	bne.n	80038ba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f002 fd96 	bl	80063a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fd4b 	bl	800531a <USB_GetDevSpeed>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	f001 f9d0 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8003894:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	4620      	mov	r0, r4
 80038a0:	f001 fa4a 	bl	8004d38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f004 fd3a 	bl	800831e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 fcd0 	bl	8006264 <USB_ReadInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d10a      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 fd17 	bl	8008302 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f002 0208 	and.w	r2, r2, #8
 80038e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fcbb 	bl	8006264 <USB_ReadInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d122      	bne.n	800393e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003904:	2301      	movs	r3, #1
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	e014      	b.n	8003934 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fb0f 	bl	8003f4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	429a      	cmp	r2, r3
 800393c:	d3e5      	bcc.n	800390a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f002 fc8e 	bl	8006264 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003952:	d13b      	bne.n	80039cc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e02b      	b.n	80039b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3340      	adds	r3, #64	; 0x40
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d115      	bne.n	80039ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003980:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	da12      	bge.n	80039ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	333f      	adds	r3, #63	; 0x3f
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fad0 	bl	8003f4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	3301      	adds	r3, #1
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3ce      	bcc.n	800395a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 fc47 	bl	8006264 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e0:	d155      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e2:	2301      	movs	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
 80039e6:	e045      	b.n	8003a74 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d12e      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da2b      	bge.n	8003a6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d121      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6a:	6053      	str	r3, [r2, #4]
            break;
 8003a6c:	e007      	b.n	8003a7e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3b4      	bcc.n	80039e8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 fbe6 	bl	8006264 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d10a      	bne.n	8003aba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f004 fcb1 	bl	800840c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f002 fbd0 	bl	8006264 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d115      	bne.n	8003afa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f004 fca1 	bl	8008428 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e000      	b.n	8003afa <HAL_PCD_IRQHandler+0x938>
      return;
 8003af8:	bf00      	nop
    }
  }
}
 8003afa:	3734      	adds	r7, #52	; 0x34
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd90      	pop	{r4, r7, pc}

08003b00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_PCD_SetAddress+0x1a>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e013      	b.n	8003b42 <HAL_PCD_SetAddress+0x42>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 fb2e 	bl	8006194 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	461a      	mov	r2, r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	70fb      	strb	r3, [r7, #3]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	803b      	strh	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da0f      	bge.n	8003b90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3338      	adds	r3, #56	; 0x38
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	705a      	strb	r2, [r3, #1]
 8003b8e:	e00f      	b.n	8003bb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 020f 	and.w	r2, r3, #15
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bbc:	883a      	ldrh	r2, [r7, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	78ba      	ldrb	r2, [r7, #2]
 8003bc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bda:	78bb      	ldrb	r3, [r7, #2]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d102      	bne.n	8003be6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_PCD_EP_Open+0xaa>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e00e      	b.n	8003c12 <HAL_PCD_EP_Open+0xc8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 fbae 	bl	8005364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c10:	7afb      	ldrb	r3, [r7, #11]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0f      	bge.n	8003c4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3338      	adds	r3, #56	; 0x38
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e00f      	b.n	8003c6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_PCD_EP_Close+0x6e>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e00e      	b.n	8003ca6 <HAL_PCD_EP_Close+0x8c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fbec 	bl	8005474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 020f 	and.w	r2, r3, #15
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	f001 fecb 	bl	8005abc <USB_EP0StartXfer>
 8003d26:	e008      	b.n	8003d3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6979      	ldr	r1, [r7, #20]
 8003d36:	f001 fc79 	bl	800562c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	460b      	mov	r3, r1
 8003d52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 020f 	and.w	r2, r3, #15
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	3338      	adds	r3, #56	; 0x38
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	3304      	adds	r3, #4
 8003d6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2201      	movs	r2, #1
 8003d82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	f001 fe81 	bl	8005abc <USB_EP0StartXfer>
 8003dba:	e008      	b.n	8003dce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6979      	ldr	r1, [r7, #20]
 8003dca:	f001 fc2f 	bl	800562c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d901      	bls.n	8003df6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e050      	b.n	8003e98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da0f      	bge.n	8003e1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3338      	adds	r3, #56	; 0x38
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	705a      	strb	r2, [r3, #1]
 8003e1c:	e00d      	b.n	8003e3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_PCD_EP_SetStall+0x82>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e01e      	b.n	8003e98 <HAL_PCD_EP_SetStall+0xc0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 f8bf 	bl	8005fec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	b2d9      	uxtb	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f002 faaf 	bl	80063ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d901      	bls.n	8003ebe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e042      	b.n	8003f44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da0f      	bge.n	8003ee6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	f003 020f 	and.w	r2, r3, #15
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	3338      	adds	r3, #56	; 0x38
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	3304      	adds	r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	705a      	strb	r2, [r3, #1]
 8003ee4:	e00f      	b.n	8003f06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	3304      	adds	r3, #4
 8003efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_PCD_EP_ClrStall+0x86>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e00e      	b.n	8003f44 <HAL_PCD_EP_ClrStall+0xa4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f002 f8c7 	bl	80060c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da0c      	bge.n	8003f7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3338      	adds	r3, #56	; 0x38
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e00c      	b.n	8003f94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fee6 	bl	8005d6c <USB_EPStopXfer>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08a      	sub	sp, #40	; 0x28
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	3338      	adds	r3, #56	; 0x38
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d901      	bls.n	8003fe6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e06c      	b.n	80040c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d902      	bls.n	8004002 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3303      	adds	r3, #3
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800400a:	e02b      	b.n	8004064 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	429a      	cmp	r2, r3
 8004020:	d902      	bls.n	8004028 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3303      	adds	r3, #3
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6919      	ldr	r1, [r3, #16]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004040:	b2db      	uxtb	r3, r3
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f001 ff3a 	bl	8005ec0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	b29b      	uxth	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d809      	bhi.n	800408e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004082:	429a      	cmp	r2, r3
 8004084:	d203      	bcs.n	800408e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1be      	bne.n	800400c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	429a      	cmp	r2, r3
 8004098:	d811      	bhi.n	80040be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2201      	movs	r2, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ba:	4013      	ands	r3, r2
 80040bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	333c      	adds	r3, #60	; 0x3c
 80040e0:	3304      	adds	r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d17b      	bne.n	80041f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4a61      	ldr	r2, [pc, #388]	; (8004290 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	f240 80b9 	bls.w	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80b3 	beq.w	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004130:	6093      	str	r3, [r2, #8]
 8004132:	e0a7      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	2320      	movs	r3, #32
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e098      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 8093 	bne.w	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	4a4b      	ldr	r2, [pc, #300]	; (8004290 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d90f      	bls.n	8004186 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	461a      	mov	r2, r3
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	6093      	str	r3, [r2, #8]
 8004184:	e07e      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	0159      	lsls	r1, r3, #5
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	440b      	add	r3, r1
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d114      	bne.n	80041e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041d0:	461a      	mov	r2, r3
 80041d2:	2101      	movs	r1, #1
 80041d4:	f002 f90a 	bl	80063ec <USB_EP0_OutStart>
 80041d8:	e006      	b.n	80041e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f004 f852 	bl	8008298 <HAL_PCD_DataOutStageCallback>
 80041f4:	e046      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d124      	bne.n	8004248 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	6093      	str	r3, [r2, #8]
 800421c:	e032      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2320      	movs	r3, #32
 8004238:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f004 f829 	bl	8008298 <HAL_PCD_DataOutStageCallback>
 8004246:	e01d      	b.n	8004284 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d114      	bne.n	8004278 <PCD_EP_OutXfrComplete_int+0x1b0>
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004270:	461a      	mov	r2, r3
 8004272:	2100      	movs	r1, #0
 8004274:	f002 f8ba 	bl	80063ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f004 f80a 	bl	8008298 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	4f54300a 	.word	0x4f54300a
 8004294:	4f54310a 	.word	0x4f54310a

08004298 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	333c      	adds	r3, #60	; 0x3c
 80042b0:	3304      	adds	r3, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d90e      	bls.n	80042ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f003 ffc1 	bl	8008274 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <PCD_EP_OutSetupPacket_int+0x88>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d90c      	bls.n	8004314 <PCD_EP_OutSetupPacket_int+0x7c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d108      	bne.n	8004314 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800430c:	461a      	mov	r2, r3
 800430e:	2101      	movs	r1, #1
 8004310:	f002 f86c 	bl	80063ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	4f54300a 	.word	0x4f54300a

08004324 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	70fb      	strb	r3, [r7, #3]
 8004330:	4613      	mov	r3, r2
 8004332:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004342:	883b      	ldrh	r3, [r7, #0]
 8004344:	0419      	lsls	r1, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	430a      	orrs	r2, r1
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
 8004350:	e028      	b.n	80043a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e00d      	b.n	8004382 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3340      	adds	r3, #64	; 0x40
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	3301      	adds	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	3b01      	subs	r3, #1
 8004388:	429a      	cmp	r2, r3
 800438a:	d3ec      	bcc.n	8004366 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800438c:	883b      	ldrh	r3, [r7, #0]
 800438e:	0418      	lsls	r0, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	3b01      	subs	r3, #1
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4302      	orrs	r2, r0
 800439c:	3340      	adds	r3, #64	; 0x40
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e267      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d075      	beq.n	80044f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440a:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b04      	cmp	r3, #4
 8004414:	d00c      	beq.n	8004430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b85      	ldr	r3, [pc, #532]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441e:	2b08      	cmp	r3, #8
 8004420:	d112      	bne.n	8004448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b82      	ldr	r3, [pc, #520]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d10b      	bne.n	8004448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	4b7e      	ldr	r3, [pc, #504]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_RCC_OscConfig+0x108>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d157      	bne.n	80044f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e242      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d106      	bne.n	8004460 <HAL_RCC_OscConfig+0x74>
 8004452:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a75      	ldr	r2, [pc, #468]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x98>
 800446a:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6f      	ldr	r2, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b6d      	ldr	r3, [pc, #436]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6c      	ldr	r2, [pc, #432]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
 8004484:	4b69      	ldr	r3, [pc, #420]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a68      	ldr	r2, [pc, #416]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a65      	ldr	r2, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fc fc18 	bl	8000cd8 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fc fc14 	bl	8000cd8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e207      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b5b      	ldr	r3, [pc, #364]	; (800462c <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xc0>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fc fc04 	bl	8000cd8 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fc fc00 	bl	8000cd8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1f3      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b51      	ldr	r3, [pc, #324]	; (800462c <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0xe8>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d063      	beq.n	80045ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004502:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004516:	2b08      	cmp	r3, #8
 8004518:	d11c      	bne.n	8004554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451a:	4b44      	ldr	r3, [pc, #272]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_RCC_OscConfig+0x152>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1c7      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4937      	ldr	r1, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	e03a      	b.n	80045ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d020      	beq.n	800459e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455c:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x244>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fc fbb9 	bl	8000cd8 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456a:	f7fc fbb5 	bl	8000cd8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e1a8      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004588:	4b28      	ldr	r3, [pc, #160]	; (800462c <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4925      	ldr	r1, [pc, #148]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
 800459c:	e015      	b.n	80045ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_OscConfig+0x244>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fc fb98 	bl	8000cd8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fc fb94 	bl	8000cd8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e187      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d036      	beq.n	8004644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_RCC_OscConfig+0x248>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fc fb78 	bl	8000cd8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ec:	f7fc fb74 	bl	8000cd8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e167      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x240>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x200>
 800460a:	e01b      	b.n	8004644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCC_OscConfig+0x248>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fc fb61 	bl	8000cd8 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	e00e      	b.n	8004638 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461a:	f7fc fb5d 	bl	8000cd8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d907      	bls.n	8004638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e150      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
 800462c:	40023800 	.word	0x40023800
 8004630:	42470000 	.word	0x42470000
 8004634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x470>)
 800463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ea      	bne.n	800461a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8097 	beq.w	8004780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004656:	4b81      	ldr	r3, [pc, #516]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	4b7d      	ldr	r3, [pc, #500]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a7c      	ldr	r2, [pc, #496]	; (800485c <HAL_RCC_OscConfig+0x470>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
 8004672:	4b7a      	ldr	r3, [pc, #488]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004682:	4b77      	ldr	r3, [pc, #476]	; (8004860 <HAL_RCC_OscConfig+0x474>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d118      	bne.n	80046c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468e:	4b74      	ldr	r3, [pc, #464]	; (8004860 <HAL_RCC_OscConfig+0x474>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a73      	ldr	r2, [pc, #460]	; (8004860 <HAL_RCC_OscConfig+0x474>)
 8004694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469a:	f7fc fb1d 	bl	8000cd8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a2:	f7fc fb19 	bl	8000cd8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e10c      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_OscConfig+0x474>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2ea>
 80046c8:	4b64      	ldr	r3, [pc, #400]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4a63      	ldr	r2, [pc, #396]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
 80046d4:	e01c      	b.n	8004710 <HAL_RCC_OscConfig+0x324>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b05      	cmp	r3, #5
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x30c>
 80046de:	4b5f      	ldr	r3, [pc, #380]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a5e      	ldr	r2, [pc, #376]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	4b5c      	ldr	r3, [pc, #368]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a5b      	ldr	r2, [pc, #364]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0x324>
 80046f8:	4b58      	ldr	r3, [pc, #352]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a57      	ldr	r2, [pc, #348]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	4b55      	ldr	r3, [pc, #340]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a54      	ldr	r2, [pc, #336]	; (800485c <HAL_RCC_OscConfig+0x470>)
 800470a:	f023 0304 	bic.w	r3, r3, #4
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fc fade 	bl	8000cd8 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471e:	e00a      	b.n	8004736 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004720:	f7fc fada 	bl	8000cd8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0cb      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004736:	4b49      	ldr	r3, [pc, #292]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ee      	beq.n	8004720 <HAL_RCC_OscConfig+0x334>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004744:	f7fc fac8 	bl	8000cd8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fc fac4 	bl	8000cd8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0b5      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ee      	bne.n	800474c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800476e:	7dfb      	ldrb	r3, [r7, #23]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	4a38      	ldr	r2, [pc, #224]	; (800485c <HAL_RCC_OscConfig+0x470>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80a1 	beq.w	80048cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800478a:	4b34      	ldr	r3, [pc, #208]	; (800485c <HAL_RCC_OscConfig+0x470>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b08      	cmp	r3, #8
 8004794:	d05c      	beq.n	8004850 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d141      	bne.n	8004822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479e:	4b31      	ldr	r3, [pc, #196]	; (8004864 <HAL_RCC_OscConfig+0x478>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fc fa98 	bl	8000cd8 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fc fa94 	bl	8000cd8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e087      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	3b01      	subs	r3, #1
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	491b      	ldr	r1, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x470>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x478>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fa:	f7fc fa6d 	bl	8000cd8 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004802:	f7fc fa69 	bl	8000cd8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e05c      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x416>
 8004820:	e054      	b.n	80048cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCC_OscConfig+0x478>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fc fa56 	bl	8000cd8 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc fa52 	bl	8000cd8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e045      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCC_OscConfig+0x470>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x444>
 800484e:	e03d      	b.n	80048cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e038      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_RCC_OscConfig+0x4ec>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d028      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d121      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d11a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d111      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	3b01      	subs	r3, #1
 80048b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0cc      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b68      	ldr	r3, [pc, #416]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90c      	bls.n	8004918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0b8      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a52      	ldr	r2, [pc, #328]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	494d      	ldr	r1, [pc, #308]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d044      	beq.n	80049fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d119      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d003      	beq.n	800499a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e06f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e067      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4934      	ldr	r1, [pc, #208]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049cc:	f7fc f984 	bl	8000cd8 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fc f980 	bl	8000cd8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e04f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d20c      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e032      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4916      	ldr	r1, [pc, #88]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	490e      	ldr	r1, [pc, #56]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a62:	f000 f821 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004a66:	4602      	mov	r2, r0
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	490a      	ldr	r1, [pc, #40]	; (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	5ccb      	ldrb	r3, [r1, r3]
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fc f8e4 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40023c00 	.word	0x40023c00
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	080088b0 	.word	0x080088b0
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b090      	sub	sp, #64	; 0x40
 8004aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab8:	2300      	movs	r3, #0
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac0:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d00d      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	f200 80a1 	bhi.w	8004c14 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x34>
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ada:	e09b      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004adc:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ae0:	e09b      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae2:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae6:	e098      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae8:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af2:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d028      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	2200      	movs	r2, #0
 8004b06:	623b      	str	r3, [r7, #32]
 8004b08:	627a      	str	r2, [r7, #36]	; 0x24
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b10:	2100      	movs	r1, #0
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b14:	fb03 f201 	mul.w	r2, r3, r1
 8004b18:	2300      	movs	r3, #0
 8004b1a:	fb00 f303 	mul.w	r3, r0, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	4a43      	ldr	r2, [pc, #268]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b22:	fba0 1202 	umull	r1, r2, r0, r2
 8004b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b28:	460a      	mov	r2, r1
 8004b2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2e:	4413      	add	r3, r2
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	2200      	movs	r2, #0
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b42:	f7fb fb47 	bl	80001d4 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4e:	e053      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b50:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	2200      	movs	r2, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	617a      	str	r2, [r7, #20]
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b62:	f04f 0b00 	mov.w	fp, #0
 8004b66:	4652      	mov	r2, sl
 8004b68:	465b      	mov	r3, fp
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	0159      	lsls	r1, r3, #5
 8004b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b78:	0150      	lsls	r0, r2, #5
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b82:	eb63 090b 	sbc.w	r9, r3, fp
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b9a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b9e:	eb63 0509 	sbc.w	r5, r3, r9
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	00eb      	lsls	r3, r5, #3
 8004bac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb0:	00e2      	lsls	r2, r4, #3
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	461d      	mov	r5, r3
 8004bb6:	eb14 030a 	adds.w	r3, r4, sl
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	eb45 030b 	adc.w	r3, r5, fp
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bce:	4629      	mov	r1, r5
 8004bd0:	028b      	lsls	r3, r1, #10
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd8:	4621      	mov	r1, r4
 8004bda:	028a      	lsls	r2, r1, #10
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	2200      	movs	r2, #0
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	60fa      	str	r2, [r7, #12]
 8004be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bec:	f7fb faf2 	bl	80001d4 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	3301      	adds	r3, #1
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3740      	adds	r7, #64	; 0x40
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	017d7840 	.word	0x017d7840

08004c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000000 	.word	0x20000000

08004c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c50:	f7ff fff0 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0a9b      	lsrs	r3, r3, #10
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	080088c0 	.word	0x080088c0

08004c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c74:	b084      	sub	sp, #16
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	f107 001c 	add.w	r0, r7, #28
 8004c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d122      	bne.n	8004cd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d105      	bne.n	8004cc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 fbee 	bl	80064a8 <USB_CoreReset>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e01a      	b.n	8004d08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fbe2 	bl	80064a8 <USB_CoreReset>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfa:	e005      	b.n	8004d08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10b      	bne.n	8004d26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f043 0206 	orr.w	r2, r3, #6
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d32:	b004      	add	sp, #16
 8004d34:	4770      	bx	lr
	...

08004d38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d165      	bne.n	8004e18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a41      	ldr	r2, [pc, #260]	; (8004e54 <USB_SetTurnaroundTime+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d906      	bls.n	8004d62 <USB_SetTurnaroundTime+0x2a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a40      	ldr	r2, [pc, #256]	; (8004e58 <USB_SetTurnaroundTime+0x120>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d202      	bcs.n	8004d62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e062      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <USB_SetTurnaroundTime+0x120>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d306      	bcc.n	8004d78 <USB_SetTurnaroundTime+0x40>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <USB_SetTurnaroundTime+0x124>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d202      	bcs.n	8004d78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d72:	230e      	movs	r3, #14
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e057      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <USB_SetTurnaroundTime+0x124>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d306      	bcc.n	8004d8e <USB_SetTurnaroundTime+0x56>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <USB_SetTurnaroundTime+0x128>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d202      	bcs.n	8004d8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d88:	230d      	movs	r3, #13
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e04c      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <USB_SetTurnaroundTime+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d306      	bcc.n	8004da4 <USB_SetTurnaroundTime+0x6c>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <USB_SetTurnaroundTime+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d9e:	230c      	movs	r3, #12
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e041      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <USB_SetTurnaroundTime+0x12c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0x82>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <USB_SetTurnaroundTime+0x130>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d802      	bhi.n	8004dba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004db4:	230b      	movs	r3, #11
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e036      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <USB_SetTurnaroundTime+0x130>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d906      	bls.n	8004dd0 <USB_SetTurnaroundTime+0x98>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <USB_SetTurnaroundTime+0x134>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dca:	230a      	movs	r3, #10
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e02b      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <USB_SetTurnaroundTime+0x134>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0xae>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <USB_SetTurnaroundTime+0x138>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d202      	bcs.n	8004de6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004de0:	2309      	movs	r3, #9
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e020      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <USB_SetTurnaroundTime+0x138>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d306      	bcc.n	8004dfc <USB_SetTurnaroundTime+0xc4>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <USB_SetTurnaroundTime+0x13c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d802      	bhi.n	8004dfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004df6:	2308      	movs	r3, #8
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e015      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <USB_SetTurnaroundTime+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d906      	bls.n	8004e12 <USB_SetTurnaroundTime+0xda>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <USB_SetTurnaroundTime+0x140>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d202      	bcs.n	8004e12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e0c:	2307      	movs	r3, #7
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e00a      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e12:	2306      	movs	r3, #6
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e007      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e1e:	2309      	movs	r3, #9
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e001      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e24:	2309      	movs	r3, #9
 8004e26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	00d8acbf 	.word	0x00d8acbf
 8004e58:	00e4e1c0 	.word	0x00e4e1c0
 8004e5c:	00f42400 	.word	0x00f42400
 8004e60:	01067380 	.word	0x01067380
 8004e64:	011a499f 	.word	0x011a499f
 8004e68:	01312cff 	.word	0x01312cff
 8004e6c:	014ca43f 	.word	0x014ca43f
 8004e70:	016e3600 	.word	0x016e3600
 8004e74:	01a6ab1f 	.word	0x01a6ab1f
 8004e78:	01e84800 	.word	0x01e84800

08004e7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d115      	bne.n	8004f0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f7fb fefe 	bl	8000cf0 <HAL_Delay>
      ms++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fa45 	bl	800638a <USB_GetMode>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d01e      	beq.n	8004f44 <USB_SetCurrentMode+0x84>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b31      	cmp	r3, #49	; 0x31
 8004f0a:	d9f0      	bls.n	8004eee <USB_SetCurrentMode+0x2e>
 8004f0c:	e01a      	b.n	8004f44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d115      	bne.n	8004f40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f20:	2001      	movs	r0, #1
 8004f22:	f7fb fee5 	bl	8000cf0 <HAL_Delay>
      ms++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 fa2c 	bl	800638a <USB_GetMode>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <USB_SetCurrentMode+0x84>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b31      	cmp	r3, #49	; 0x31
 8004f3c:	d9f0      	bls.n	8004f20 <USB_SetCurrentMode+0x60>
 8004f3e:	e001      	b.n	8004f44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e005      	b.n	8004f50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b32      	cmp	r3, #50	; 0x32
 8004f48:	d101      	bne.n	8004f4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f58:	b084      	sub	sp, #16
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e009      	b.n	8004f8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3340      	adds	r3, #64	; 0x40
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b0e      	cmp	r3, #14
 8004f90:	d9f2      	bls.n	8004f78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11c      	bne.n	8004fd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa6:	f043 0302 	orr.w	r3, r3, #2
 8004faa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
 8004fd0:	e00b      	b.n	8004fea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	461a      	mov	r2, r3
 8005006:	680b      	ldr	r3, [r1, #0]
 8005008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10c      	bne.n	800502a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005016:	2100      	movs	r1, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f965 	bl	80052e8 <USB_SetDevSpeed>
 800501e:	e008      	b.n	8005032 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f960 	bl	80052e8 <USB_SetDevSpeed>
 8005028:	e003      	b.n	8005032 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800502a:	2103      	movs	r1, #3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f95b 	bl	80052e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005032:	2110      	movs	r1, #16
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8f3 	bl	8005220 <USB_FlushTxFifo>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f91f 	bl	8005288 <USB_FlushRxFifo>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	461a      	mov	r2, r3
 8005068:	2300      	movs	r3, #0
 800506a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e043      	b.n	8005106 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005094:	d118      	bne.n	80050c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	461a      	mov	r2, r3
 80050aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e013      	b.n	80050da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e008      	b.n	80050da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3301      	adds	r3, #1
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d3b7      	bcc.n	800507e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e043      	b.n	800519c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800512a:	d118      	bne.n	800515e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e013      	b.n	8005170 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e008      	b.n	8005170 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	2300      	movs	r3, #0
 800516e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3b7      	bcc.n	8005114 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f043 0210 	orr.w	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <USB_DevInit+0x2c4>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f043 0208 	orr.w	r2, r3, #8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005218:	b004      	add	sp, #16
 800521a:	4770      	bx	lr
 800521c:	803c3800 	.word	0x803c3800

08005220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <USB_FlushTxFifo+0x64>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e01b      	b.n	8005278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	daf2      	bge.n	800522e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	019b      	lsls	r3, r3, #6
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <USB_FlushTxFifo+0x64>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b20      	cmp	r3, #32
 8005274:	d0f0      	beq.n	8005258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	00030d40 	.word	0x00030d40

08005288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <USB_FlushRxFifo+0x5c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e018      	b.n	80052d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	daf2      	bge.n	8005294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2210      	movs	r2, #16
 80052b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <USB_FlushRxFifo+0x5c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e006      	b.n	80052d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d0f0      	beq.n	80052b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	00030d40 	.word	0x00030d40

080052e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0306 	and.w	r3, r3, #6
 8005332:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
 800533e:	e00a      	b.n	8005356 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d002      	beq.n	800534c <USB_GetDevSpeed+0x32>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d102      	bne.n	8005352 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800534c:	2302      	movs	r3, #2
 800534e:	75fb      	strb	r3, [r7, #23]
 8005350:	e001      	b.n	8005356 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005352:	230f      	movs	r3, #15
 8005354:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d13a      	bne.n	80053f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	2101      	movs	r1, #1
 8005392:	fa01 f303 	lsl.w	r3, r1, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539e:	4313      	orrs	r3, r2
 80053a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d155      	bne.n	8005464 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	791b      	ldrb	r3, [r3, #4]
 80053d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	059b      	lsls	r3, r3, #22
 80053da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053dc:	4313      	orrs	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e036      	b.n	8005464 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	2101      	movs	r1, #1
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005414:	4313      	orrs	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11a      	bne.n	8005464 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	791b      	ldrb	r3, [r3, #4]
 8005448:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800544a:	430b      	orrs	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005462:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d161      	bne.n	8005554 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a6:	d11f      	bne.n	80054e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	2101      	movs	r1, #1
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	b29b      	uxth	r3, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005508:	4013      	ands	r3, r2
 800550a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	2101      	movs	r1, #1
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552c:	4013      	ands	r3, r2
 800552e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	440b      	add	r3, r1
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	4619      	mov	r1, r3
 800554c:	4b35      	ldr	r3, [pc, #212]	; (8005624 <USB_DeactivateEndpoint+0x1b0>)
 800554e:	4013      	ands	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
 8005552:	e060      	b.n	8005616 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556a:	d11f      	bne.n	80055ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005586:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800558a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	43db      	mvns	r3, r3
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055cc:	4013      	ands	r3, r2
 80055ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	43db      	mvns	r3, r3
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f0:	4013      	ands	r3, r2
 80055f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	0159      	lsls	r1, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	440b      	add	r3, r1
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	4619      	mov	r1, r3
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <USB_DeactivateEndpoint+0x1b4>)
 8005612:	4013      	ands	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	ec337800 	.word	0xec337800
 8005628:	eff37800 	.word	0xeff37800

0800562c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 815c 	bne.w	8005906 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d132      	bne.n	80056bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b4:	0cdb      	lsrs	r3, r3, #19
 80056b6:	04db      	lsls	r3, r3, #19
 80056b8:	6113      	str	r3, [r2, #16]
 80056ba:	e074      	b.n	80057a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d6:	0cdb      	lsrs	r3, r3, #19
 80056d8:	04db      	lsls	r3, r3, #19
 80056da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	440b      	add	r3, r1
 8005718:	1e59      	subs	r1, r3, #1
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005722:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005724:	4b9d      	ldr	r3, [pc, #628]	; (800599c <USB_EPStartXfer+0x370>)
 8005726:	400b      	ands	r3, r1
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	0148      	lsls	r0, r1, #5
 800572c:	69f9      	ldr	r1, [r7, #28]
 800572e:	4401      	add	r1, r0
 8005730:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005734:	4313      	orrs	r3, r2
 8005736:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574e:	69b9      	ldr	r1, [r7, #24]
 8005750:	0148      	lsls	r0, r1, #5
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	4401      	add	r1, r0
 8005756:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800575a:	4313      	orrs	r3, r2
 800575c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	791b      	ldrb	r3, [r3, #4]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d11f      	bne.n	80057a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005784:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d14b      	bne.n	8005844 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	461a      	mov	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d128      	bne.n	8005822 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e00f      	b.n	8005822 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005820:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e133      	b.n	8005aac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005862:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d015      	beq.n	8005898 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 811b 	beq.w	8005aac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	69f9      	ldr	r1, [r7, #28]
 800588e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005892:	4313      	orrs	r3, r2
 8005894:	634b      	str	r3, [r1, #52]	; 0x34
 8005896:	e109      	b.n	8005aac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e00f      	b.n	80058ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6919      	ldr	r1, [r3, #16]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781a      	ldrb	r2, [r3, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	b298      	uxth	r0, r3
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4603      	mov	r3, r0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fade 	bl	8005ec0 <USB_WritePacket>
 8005904:	e0d2      	b.n	8005aac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005920:	0cdb      	lsrs	r3, r3, #19
 8005922:	04db      	lsls	r3, r3, #19
 8005924:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005948:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d126      	bne.n	80059a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005968:	69b9      	ldr	r1, [r7, #24]
 800596a:	0148      	lsls	r0, r1, #5
 800596c:	69f9      	ldr	r1, [r7, #28]
 800596e:	4401      	add	r1, r0
 8005970:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005974:	4313      	orrs	r3, r2
 8005976:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005996:	6113      	str	r3, [r2, #16]
 8005998:	e03a      	b.n	8005a10 <USB_EPStartXfer+0x3e4>
 800599a:	bf00      	nop
 800599c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	8afa      	ldrh	r2, [r7, #22]
 80059bc:	fb03 f202 	mul.w	r2, r3, r2
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	8afb      	ldrh	r3, [r7, #22]
 80059d4:	04d9      	lsls	r1, r3, #19
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <USB_EPStartXfer+0x48c>)
 80059d8:	400b      	ands	r3, r1
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	0148      	lsls	r0, r1, #5
 80059de:	69f9      	ldr	r1, [r7, #28]
 80059e0:	4401      	add	r1, r0
 80059e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059e6:	4313      	orrs	r3, r2
 80059e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	0148      	lsls	r0, r1, #5
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	4401      	add	r1, r0
 8005a08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10d      	bne.n	8005a32 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6919      	ldr	r1, [r3, #16]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2e:	460a      	mov	r2, r1
 8005a30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d128      	bne.n	8005a8c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d110      	bne.n	8005a6c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e00f      	b.n	8005a8c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	1ff80000 	.word	0x1ff80000

08005abc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 80ce 	bne.w	8005c7a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d132      	bne.n	8005b4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	0cdb      	lsrs	r3, r3, #19
 8005b46:	04db      	lsls	r3, r3, #19
 8005b48:	6113      	str	r3, [r2, #16]
 8005b4a:	e04e      	b.n	8005bea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	0cdb      	lsrs	r3, r3, #19
 8005b68:	04db      	lsls	r3, r3, #19
 8005b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d903      	bls.n	8005ba4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bda:	6939      	ldr	r1, [r7, #16]
 8005bdc:	0148      	lsls	r0, r1, #5
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	4401      	add	r1, r0
 8005be2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005be6:	4313      	orrs	r3, r2
 8005be8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d11e      	bne.n	8005c2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	461a      	mov	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e097      	b.n	8005d5e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8083 	beq.w	8005d5e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	6979      	ldr	r1, [r7, #20]
 8005c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c74:	4313      	orrs	r3, r2
 8005c76:	634b      	str	r3, [r1, #52]	; 0x34
 8005c78:	e071      	b.n	8005d5e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	0cdb      	lsrs	r3, r3, #19
 8005c96:	04db      	lsls	r3, r3, #19
 8005c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	0148      	lsls	r0, r1, #5
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	4401      	add	r1, r0
 8005d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10d      	bne.n	8005d3e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6919      	ldr	r1, [r3, #16]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d14a      	bne.n	8005e20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da2:	f040 8086 	bne.w	8005eb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d902      	bls.n	8005e04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
          break;
 8005e02:	e056      	b.n	8005eb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1c:	d0e7      	beq.n	8005dee <USB_EPStopXfer+0x82>
 8005e1e:	e048      	b.n	8005eb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e38:	d13b      	bne.n	8005eb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d902      	bls.n	8005e98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
          break;
 8005e96:	e00c      	b.n	8005eb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb0:	d0e7      	beq.n	8005e82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	460b      	mov	r3, r1
 8005ed0:	71fb      	strb	r3, [r7, #7]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d123      	bne.n	8005f2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ee6:	88bb      	ldrh	r3, [r7, #4]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	089b      	lsrs	r3, r3, #2
 8005eec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e018      	b.n	8005f26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	031a      	lsls	r2, r3, #12
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f00:	461a      	mov	r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	3301      	adds	r3, #1
 8005f12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	3301      	adds	r3, #1
 8005f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3e2      	bcc.n	8005ef4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3724      	adds	r7, #36	; 0x24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b08b      	sub	sp, #44	; 0x2c
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	e014      	b.n	8005f92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	3301      	adds	r3, #1
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	3301      	adds	r3, #1
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	3301      	adds	r3, #1
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d3e6      	bcc.n	8005f68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f9a:	8bfb      	ldrh	r3, [r7, #30]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01e      	beq.n	8005fde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	461a      	mov	r2, r3
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	701a      	strb	r2, [r3, #0]
      i++;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	3301      	adds	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fd8:	8bfb      	ldrh	r3, [r7, #30]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ea      	bne.n	8005fb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	372c      	adds	r7, #44	; 0x2c
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d12c      	bne.n	8006062 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	db12      	blt.n	8006040 <USB_EPSetStall+0x54>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800603e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e02b      	b.n	80060ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db12      	blt.n	800609a <USB_EPSetStall+0xae>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006098:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d128      	bne.n	8006136 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006102:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	791b      	ldrb	r3, [r3, #4]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d003      	beq.n	8006114 <USB_EPClearStall+0x4c>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	791b      	ldrb	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d138      	bne.n	8006186 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e027      	b.n	8006186 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006154:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d003      	beq.n	8006166 <USB_EPClearStall+0x9e>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	791b      	ldrb	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d10f      	bne.n	8006186 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620e:	f023 0302 	bic.w	r3, r3, #2
 8006212:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800623c:	f023 0303 	bic.w	r3, r3, #3
 8006240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	4013      	ands	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	0c1b      	lsrs	r3, r3, #16
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	b29b      	uxth	r3, r3
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4013      	ands	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006320:	68bb      	ldr	r3, [r7, #8]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632e:	b480      	push	{r7}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	fa22 f303 	lsr.w	r3, r2, r3
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	b2db      	uxtb	r3, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4013      	ands	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800637c:	68bb      	ldr	r3, [r7, #8]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0301 	and.w	r3, r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063c4:	f023 0307 	bic.w	r3, r3, #7
 80063c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	460b      	mov	r3, r1
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	333c      	adds	r3, #60	; 0x3c
 8006402:	3304      	adds	r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <USB_EP0_OutStart+0xb8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d90a      	bls.n	8006426 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006420:	d101      	bne.n	8006426 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e037      	b.n	8006496 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	461a      	mov	r2, r3
 800642e:	2300      	movs	r3, #0
 8006430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006454:	f043 0318 	orr.w	r3, r3, #24
 8006458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800646c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d10f      	bne.n	8006494 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	4f54300a 	.word	0x4f54300a

080064a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a13      	ldr	r2, [pc, #76]	; (800650c <USB_CoreReset+0x64>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e01b      	b.n	80064fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	daf2      	bge.n	80064b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a09      	ldr	r2, [pc, #36]	; (800650c <USB_CoreReset+0x64>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d901      	bls.n	80064f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e006      	b.n	80064fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d0f0      	beq.n	80064de <USB_CoreReset+0x36>

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	00030d40 	.word	0x00030d40

08006510 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800651c:	2010      	movs	r0, #16
 800651e:	f002 f909 	bl	8008734 <USBD_static_malloc>
 8006522:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	32b0      	adds	r2, #176	; 0xb0
 8006534:	2100      	movs	r1, #0
 8006536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800653a:	2302      	movs	r3, #2
 800653c:	e048      	b.n	80065d0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32b0      	adds	r2, #176	; 0xb0
 8006548:	68f9      	ldr	r1, [r7, #12]
 800654a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	32b0      	adds	r2, #176	; 0xb0
 8006558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7c1b      	ldrb	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <USBD_HID_Init+0xc8>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3326      	adds	r3, #38	; 0x26
 8006580:	2207      	movs	r2, #7
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e00c      	b.n	80065a0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <USBD_HID_Init+0xc8>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 020f 	and.w	r2, r3, #15
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	3326      	adds	r3, #38	; 0x26
 800659c:	220a      	movs	r2, #10
 800659e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <USBD_HID_Init+0xc8>)
 80065a2:	7819      	ldrb	r1, [r3, #0]
 80065a4:	2304      	movs	r3, #4
 80065a6:	2203      	movs	r2, #3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 ffb2 	bl	8008512 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <USBD_HID_Init+0xc8>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f003 020f 	and.w	r2, r3, #15
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	2201      	movs	r2, #1
 80065c6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	200000bf 	.word	0x200000bf

080065dc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80065e8:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <USBD_HID_DeInit+0x8c>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 ffb5 	bl	800855e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80065f4:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <USBD_HID_DeInit+0x8c>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2200      	movs	r2, #0
 800660c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <USBD_HID_DeInit+0x8c>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	3326      	adds	r3, #38	; 0x26
 8006624:	2200      	movs	r2, #0
 8006626:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32b0      	adds	r2, #176	; 0xb0
 8006632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	32b0      	adds	r2, #176	; 0xb0
 8006644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006648:	4618      	mov	r0, r3
 800664a:	f002 f881 	bl	8008750 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	32b0      	adds	r2, #176	; 0xb0
 8006658:	2100      	movs	r1, #0
 800665a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200000bf 	.word	0x200000bf

0800666c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	32b0      	adds	r2, #176	; 0xb0
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	e0e8      	b.n	800686a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d046      	beq.n	8006732 <USBD_HID_Setup+0xc6>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	f040 80d8 	bne.w	800685a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	3b02      	subs	r3, #2
 80066b0:	2b09      	cmp	r3, #9
 80066b2:	d836      	bhi.n	8006722 <USBD_HID_Setup+0xb6>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <USBD_HID_Setup+0x50>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	08006713 	.word	0x08006713
 80066c0:	080066f3 	.word	0x080066f3
 80066c4:	08006723 	.word	0x08006723
 80066c8:	08006723 	.word	0x08006723
 80066cc:	08006723 	.word	0x08006723
 80066d0:	08006723 	.word	0x08006723
 80066d4:	08006723 	.word	0x08006723
 80066d8:	08006723 	.word	0x08006723
 80066dc:	08006701 	.word	0x08006701
 80066e0:	080066e5 	.word	0x080066e5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	885b      	ldrh	r3, [r3, #2]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	601a      	str	r2, [r3, #0]
          break;
 80066f0:	e01e      	b.n	8006730 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fbd5 	bl	8007ea8 <USBD_CtlSendData>
          break;
 80066fe:	e017      	b.n	8006730 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	0a1b      	lsrs	r3, r3, #8
 8006706:	b29b      	uxth	r3, r3
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	605a      	str	r2, [r3, #4]
          break;
 8006710:	e00e      	b.n	8006730 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3304      	adds	r3, #4
 8006716:	2201      	movs	r2, #1
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fbc4 	bl	8007ea8 <USBD_CtlSendData>
          break;
 8006720:	e006      	b.n	8006730 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fb4e 	bl	8007dc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	75fb      	strb	r3, [r7, #23]
          break;
 800672e:	bf00      	nop
      }
      break;
 8006730:	e09a      	b.n	8006868 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b0b      	cmp	r3, #11
 8006738:	f200 8086 	bhi.w	8006848 <USBD_HID_Setup+0x1dc>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <USBD_HID_Setup+0xd8>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006775 	.word	0x08006775
 8006748:	08006857 	.word	0x08006857
 800674c:	08006849 	.word	0x08006849
 8006750:	08006849 	.word	0x08006849
 8006754:	08006849 	.word	0x08006849
 8006758:	08006849 	.word	0x08006849
 800675c:	0800679f 	.word	0x0800679f
 8006760:	08006849 	.word	0x08006849
 8006764:	08006849 	.word	0x08006849
 8006768:	08006849 	.word	0x08006849
 800676c:	080067f7 	.word	0x080067f7
 8006770:	08006821 	.word	0x08006821
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d107      	bne.n	8006790 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006780:	f107 030a 	add.w	r3, r7, #10
 8006784:	2202      	movs	r2, #2
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fb8d 	bl	8007ea8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800678e:	e063      	b.n	8006858 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fb17 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	75fb      	strb	r3, [r7, #23]
          break;
 800679c:	e05c      	b.n	8006858 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	885b      	ldrh	r3, [r3, #2]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b22      	cmp	r3, #34	; 0x22
 80067a8:	d108      	bne.n	80067bc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	88db      	ldrh	r3, [r3, #6]
 80067ae:	2b3f      	cmp	r3, #63	; 0x3f
 80067b0:	bf28      	it	cs
 80067b2:	233f      	movcs	r3, #63	; 0x3f
 80067b4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80067b6:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <USBD_HID_Setup+0x208>)
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	e015      	b.n	80067e8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	885b      	ldrh	r3, [r3, #2]
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b21      	cmp	r3, #33	; 0x21
 80067c6:	d108      	bne.n	80067da <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80067c8:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <USBD_HID_Setup+0x20c>)
 80067ca:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	88db      	ldrh	r3, [r3, #6]
 80067d0:	2b09      	cmp	r3, #9
 80067d2:	bf28      	it	cs
 80067d4:	2309      	movcs	r3, #9
 80067d6:	82bb      	strh	r3, [r7, #20]
 80067d8:	e006      	b.n	80067e8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 faf2 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	75fb      	strb	r3, [r7, #23]
            break;
 80067e6:	e037      	b.n	8006858 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80067e8:	8abb      	ldrh	r3, [r7, #20]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6939      	ldr	r1, [r7, #16]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fb5a 	bl	8007ea8 <USBD_CtlSendData>
          break;
 80067f4:	e030      	b.n	8006858 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d107      	bne.n	8006812 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3308      	adds	r3, #8
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fb4c 	bl	8007ea8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006810:	e022      	b.n	8006858 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 fad6 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800681a:	2303      	movs	r3, #3
 800681c:	75fb      	strb	r3, [r7, #23]
          break;
 800681e:	e01b      	b.n	8006858 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b03      	cmp	r3, #3
 800682a:	d106      	bne.n	800683a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	885b      	ldrh	r3, [r3, #2]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006838:	e00e      	b.n	8006858 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fac2 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006842:	2303      	movs	r3, #3
 8006844:	75fb      	strb	r3, [r7, #23]
          break;
 8006846:	e007      	b.n	8006858 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fabb 	bl	8007dc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	75fb      	strb	r3, [r7, #23]
          break;
 8006854:	e000      	b.n	8006858 <USBD_HID_Setup+0x1ec>
          break;
 8006856:	bf00      	nop
      }
      break;
 8006858:	e006      	b.n	8006868 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fab2 	bl	8007dc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	75fb      	strb	r3, [r7, #23]
      break;
 8006866:	bf00      	nop
  }

  return (uint8_t)ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000080 	.word	0x20000080
 8006878:	20000068 	.word	0x20000068

0800687c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	32b0      	adds	r2, #176	; 0xb0
 8006894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006898:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e014      	b.n	80068ce <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d10d      	bne.n	80068cc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	7b1b      	ldrb	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2201      	movs	r2, #1
 80068bc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <USBD_HID_SendReport+0x5c>)
 80068c0:	7819      	ldrb	r1, [r3, #0]
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f001 fef1 	bl	80086ae <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200000bf 	.word	0x200000bf

080068dc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80068e4:	2181      	movs	r1, #129	; 0x81
 80068e6:	4809      	ldr	r0, [pc, #36]	; (800690c <USBD_HID_GetFSCfgDesc+0x30>)
 80068e8:	f000 fc35 	bl	8007156 <USBD_GetEpDesc>
 80068ec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	220a      	movs	r2, #10
 80068f8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2222      	movs	r2, #34	; 0x22
 80068fe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000044 	.word	0x20000044

08006910 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	4809      	ldr	r0, [pc, #36]	; (8006940 <USBD_HID_GetHSCfgDesc+0x30>)
 800691c:	f000 fc1b 	bl	8007156 <USBD_GetEpDesc>
 8006920:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2207      	movs	r2, #7
 800692c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2222      	movs	r2, #34	; 0x22
 8006932:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000044 	.word	0x20000044

08006944 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800694c:	2181      	movs	r1, #129	; 0x81
 800694e:	4809      	ldr	r0, [pc, #36]	; (8006974 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006950:	f000 fc01 	bl	8007156 <USBD_GetEpDesc>
 8006954:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	220a      	movs	r2, #10
 8006960:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2222      	movs	r2, #34	; 0x22
 8006966:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000044 	.word	0x20000044

08006978 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32b0      	adds	r2, #176	; 0xb0
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	2200      	movs	r2, #0
 8006994:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	220a      	movs	r2, #10
 80069b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80069b2:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000074 	.word	0x20000074

080069c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	e01f      	b.n	8006a1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	79fa      	ldrb	r2, [r7, #7]
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fd17 	bl	8008444 <USBD_LL_Init>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e025      	b.n	8006a88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32ae      	adds	r2, #174	; 0xae
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00f      	beq.n	8006a78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	; 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	f107 020e 	add.w	r2, r7, #14
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	4602      	mov	r2, r0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fd1f 	bl	80084dc <USBD_LL_Start>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f908 	bl	8007d52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d01a      	beq.n	8006b9c <USBD_LL_SetupStage+0x72>
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d822      	bhi.n	8006bb0 <USBD_LL_SetupStage+0x86>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <USBD_LL_SetupStage+0x4a>
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d00a      	beq.n	8006b88 <USBD_LL_SetupStage+0x5e>
 8006b72:	e01d      	b.n	8006bb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb5f 	bl	8007240 <USBD_StdDevReq>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
      break;
 8006b86:	e020      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbc7 	bl	8007324 <USBD_StdItfReq>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9a:	e016      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc29 	bl	80073fc <USBD_StdEPReq>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
      break;
 8006bae:	e00c      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fcec 	bl	800859c <USBD_LL_StallEP>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc8:	bf00      	nop
  }

  return ret;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16e      	bne.n	8006cca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f040 8098 	bne.w	8006d30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d913      	bls.n	8006c34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bf28      	it	cs
 8006c26:	4613      	movcs	r3, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 f967 	bl	8007f00 <USBD_CtlContinueRx>
 8006c32:	e07d      	b.n	8006d30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d014      	beq.n	8006c6c <USBD_LL_DataOutStage+0x98>
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d81d      	bhi.n	8006c82 <USBD_LL_DataOutStage+0xae>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <USBD_LL_DataOutStage+0x7c>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d003      	beq.n	8006c56 <USBD_LL_DataOutStage+0x82>
 8006c4e:	e018      	b.n	8006c82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75bb      	strb	r3, [r7, #22]
            break;
 8006c54:	e018      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa5e 	bl	8007122 <USBD_CoreFindIF>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75bb      	strb	r3, [r7, #22]
            break;
 8006c6a:	e00d      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fa60 	bl	800713c <USBD_CoreFindEP>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c80:	e002      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75bb      	strb	r3, [r7, #22]
            break;
 8006c86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c88:	7dbb      	ldrb	r3, [r7, #22]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d119      	bne.n	8006cc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d113      	bne.n	8006cc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	32ae      	adds	r2, #174	; 0xae
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cb2:	7dba      	ldrb	r2, [r7, #22]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	32ae      	adds	r2, #174	; 0xae
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f001 f92d 	bl	8007f22 <USBD_CtlSendStatus>
 8006cc8:	e032      	b.n	8006d30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fa31 	bl	800713c <USBD_CoreFindEP>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cde:	7dbb      	ldrb	r3, [r7, #22]
 8006ce0:	2bff      	cmp	r3, #255	; 0xff
 8006ce2:	d025      	beq.n	8006d30 <USBD_LL_DataOutStage+0x15c>
 8006ce4:	7dbb      	ldrb	r3, [r7, #22]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d122      	bne.n	8006d30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d117      	bne.n	8006d26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006cf6:	7dba      	ldrb	r2, [r7, #22]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	32ae      	adds	r2, #174	; 0xae
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00f      	beq.n	8006d26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d06:	7dba      	ldrb	r2, [r7, #22]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d0e:	7dba      	ldrb	r2, [r7, #22]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	32ae      	adds	r2, #174	; 0xae
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	7afa      	ldrb	r2, [r7, #11]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	4798      	blx	r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	e000      	b.n	8006d32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	460b      	mov	r3, r1
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d16f      	bne.n	8006e2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3314      	adds	r3, #20
 8006d52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d15a      	bne.n	8006e14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d914      	bls.n	8006d94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f001 f8ac 	bl	8007ede <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f001 fcaf 	bl	80086f0 <USBD_LL_PrepareReceive>
 8006d92:	e03f      	b.n	8006e14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d11c      	bne.n	8006dda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d316      	bcc.n	8006dda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20f      	bcs.n	8006dda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 f88d 	bl	8007ede <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f001 fc8c 	bl	80086f0 <USBD_LL_PrepareReceive>
 8006dd8:	e01c      	b.n	8006e14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d10f      	bne.n	8006e06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fbc7 	bl	800859c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f001 f89a 	bl	8007f48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d03a      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fe42 	bl	8006aa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e2c:	e032      	b.n	8006e94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f97f 	bl	800713c <USBD_CoreFindEP>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2bff      	cmp	r3, #255	; 0xff
 8006e46:	d025      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d122      	bne.n	8006e94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d11c      	bne.n	8006e94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e5a:	7dfa      	ldrb	r2, [r7, #23]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	32ae      	adds	r2, #174	; 0xae
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e6a:	7dfa      	ldrb	r2, [r7, #23]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e72:	7dfa      	ldrb	r2, [r7, #23]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	32ae      	adds	r2, #174	; 0xae
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	7afa      	ldrb	r2, [r7, #11]
 8006e80:	4611      	mov	r1, r2
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e8a:	7dbb      	ldrb	r3, [r7, #22]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	e000      	b.n	8006e96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d014      	beq.n	8006f04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00e      	beq.n	8006f04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fb01 	bl	8008512 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	2200      	movs	r2, #0
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 faf3 	bl	8008512 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2240      	movs	r2, #64	; 0x40
 8006f36:	621a      	str	r2, [r3, #32]

  return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d106      	bne.n	8006fb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d110      	bne.n	8006ff4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32ae      	adds	r2, #174	; 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e01c      	b.n	800705a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d115      	bne.n	8007058 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	32ae      	adds	r2, #174	; 0xae
 8007078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e01c      	b.n	80070be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b03      	cmp	r3, #3
 800708e:	d115      	bne.n	80070bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32ae      	adds	r2, #174	; 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	4611      	mov	r1, r2
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00e      	beq.n	8007118 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6852      	ldr	r2, [r2, #4]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800712e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007148:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	885b      	ldrh	r3, [r3, #2]
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	429a      	cmp	r2, r3
 800717c:	d920      	bls.n	80071c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007186:	e013      	b.n	80071b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007188:	f107 030a 	add.w	r3, r7, #10
 800718c:	4619      	mov	r1, r3
 800718e:	6978      	ldr	r0, [r7, #20]
 8007190:	f000 f81b 	bl	80071ca <USBD_GetNextDesc>
 8007194:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b05      	cmp	r3, #5
 800719c:	d108      	bne.n	80071b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	789b      	ldrb	r3, [r3, #2]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d008      	beq.n	80071be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d8e5      	bhi.n	8007188 <USBD_GetEpDesc+0x32>
 80071bc:	e000      	b.n	80071c0 <USBD_GetEpDesc+0x6a>
          break;
 80071be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071c0:	693b      	ldr	r3, [r7, #16]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3301      	adds	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007222:	8a3b      	ldrh	r3, [r7, #16]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	b21a      	sxth	r2, r3
 8007228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800722c:	4313      	orrs	r3, r2
 800722e:	b21b      	sxth	r3, r3
 8007230:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007232:	89fb      	ldrh	r3, [r7, #14]
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdDevReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d857      	bhi.n	800730e <USBD_StdDevReq+0xce>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00f      	beq.n	8007282 <USBD_StdDevReq+0x42>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d153      	bne.n	800730e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32ae      	adds	r2, #174	; 0xae
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e04a      	b.n	8007318 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	2b09      	cmp	r3, #9
 8007288:	d83b      	bhi.n	8007302 <USBD_StdDevReq+0xc2>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <USBD_StdDevReq+0x50>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072e5 	.word	0x080072e5
 8007294:	080072f9 	.word	0x080072f9
 8007298:	08007303 	.word	0x08007303
 800729c:	080072ef 	.word	0x080072ef
 80072a0:	08007303 	.word	0x08007303
 80072a4:	080072c3 	.word	0x080072c3
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	08007303 	.word	0x08007303
 80072b0:	080072db 	.word	0x080072db
 80072b4:	080072cd 	.word	0x080072cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa3c 	bl	8007738 <USBD_GetDescriptor>
          break;
 80072c0:	e024      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fba1 	bl	8007a0c <USBD_SetAddress>
          break;
 80072ca:	e01f      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fbe0 	bl	8007a94 <USBD_SetConfig>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
          break;
 80072d8:	e018      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc83 	bl	8007be8 <USBD_GetConfig>
          break;
 80072e2:	e013      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fcb4 	bl	8007c54 <USBD_GetStatus>
          break;
 80072ec:	e00e      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fce3 	bl	8007cbc <USBD_SetFeature>
          break;
 80072f6:	e009      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd07 	bl	8007d0e <USBD_ClrFeature>
          break;
 8007300:	e004      	b.n	800730c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fd5e 	bl	8007dc6 <USBD_CtlError>
          break;
 800730a:	bf00      	nop
      }
      break;
 800730c:	e004      	b.n	8007318 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd58 	bl	8007dc6 <USBD_CtlError>
      break;
 8007316:	bf00      	nop
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop

08007324 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d005      	beq.n	800734a <USBD_StdItfReq+0x26>
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d852      	bhi.n	80073e8 <USBD_StdItfReq+0xc4>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <USBD_StdItfReq+0x26>
 8007346:	2b20      	cmp	r3, #32
 8007348:	d14e      	bne.n	80073e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	2b02      	cmp	r3, #2
 8007356:	d840      	bhi.n	80073da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	889b      	ldrh	r3, [r3, #4]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	d836      	bhi.n	80073d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	889b      	ldrh	r3, [r3, #4]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fed9 	bl	8007122 <USBD_CoreFindIF>
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d01d      	beq.n	80073b6 <USBD_StdItfReq+0x92>
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11a      	bne.n	80073b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007380:	7bba      	ldrb	r2, [r7, #14]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	32ae      	adds	r2, #174	; 0xae
 8007386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00f      	beq.n	80073b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007390:	7bba      	ldrb	r2, [r7, #14]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007398:	7bba      	ldrb	r2, [r7, #14]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	; 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073ae:	e004      	b.n	80073ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073b4:	e001      	b.n	80073ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d110      	bne.n	80073e4 <USBD_StdItfReq+0xc0>
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10d      	bne.n	80073e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fdaa 	bl	8007f22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073ce:	e009      	b.n	80073e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fcf7 	bl	8007dc6 <USBD_CtlError>
          break;
 80073d8:	e004      	b.n	80073e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fcf2 	bl	8007dc6 <USBD_CtlError>
          break;
 80073e2:	e000      	b.n	80073e6 <USBD_StdItfReq+0xc2>
          break;
 80073e4:	bf00      	nop
      }
      break;
 80073e6:	e004      	b.n	80073f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fceb 	bl	8007dc6 <USBD_CtlError>
      break;
 80073f0:	bf00      	nop
  }

  return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	889b      	ldrh	r3, [r3, #4]
 800740e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d007      	beq.n	800742c <USBD_StdEPReq+0x30>
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	f200 817f 	bhi.w	8007720 <USBD_StdEPReq+0x324>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02a      	beq.n	800747c <USBD_StdEPReq+0x80>
 8007426:	2b20      	cmp	r3, #32
 8007428:	f040 817a 	bne.w	8007720 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fe83 	bl	800713c <USBD_CoreFindEP>
 8007436:	4603      	mov	r3, r0
 8007438:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800743a:	7b7b      	ldrb	r3, [r7, #13]
 800743c:	2bff      	cmp	r3, #255	; 0xff
 800743e:	f000 8174 	beq.w	800772a <USBD_StdEPReq+0x32e>
 8007442:	7b7b      	ldrb	r3, [r7, #13]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8170 	bne.w	800772a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800744a:	7b7a      	ldrb	r2, [r7, #13]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007452:	7b7a      	ldrb	r2, [r7, #13]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	32ae      	adds	r2, #174	; 0xae
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8163 	beq.w	800772a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007464:	7b7a      	ldrb	r2, [r7, #13]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32ae      	adds	r2, #174	; 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800747a:	e156      	b.n	800772a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d008      	beq.n	8007496 <USBD_StdEPReq+0x9a>
 8007484:	2b03      	cmp	r3, #3
 8007486:	f300 8145 	bgt.w	8007714 <USBD_StdEPReq+0x318>
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 809b 	beq.w	80075c6 <USBD_StdEPReq+0x1ca>
 8007490:	2b01      	cmp	r3, #1
 8007492:	d03c      	beq.n	800750e <USBD_StdEPReq+0x112>
 8007494:	e13e      	b.n	8007714 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_StdEPReq+0xac>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d016      	beq.n	80074d4 <USBD_StdEPReq+0xd8>
 80074a6:	e02c      	b.n	8007502 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <USBD_StdEPReq+0xce>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d00a      	beq.n	80074ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f86f 	bl	800859c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074be:	2180      	movs	r1, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f86b 	bl	800859c <USBD_LL_StallEP>
 80074c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c8:	e020      	b.n	800750c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc7a 	bl	8007dc6 <USBD_CtlError>
              break;
 80074d2:	e01b      	b.n	800750c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10e      	bne.n	80074fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <USBD_StdEPReq+0xfe>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b80      	cmp	r3, #128	; 0x80
 80074e6:	d008      	beq.n	80074fa <USBD_StdEPReq+0xfe>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 f851 	bl	800859c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fd11 	bl	8007f22 <USBD_CtlSendStatus>

              break;
 8007500:	e004      	b.n	800750c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc5e 	bl	8007dc6 <USBD_CtlError>
              break;
 800750a:	bf00      	nop
          }
          break;
 800750c:	e107      	b.n	800771e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d002      	beq.n	8007520 <USBD_StdEPReq+0x124>
 800751a:	2b03      	cmp	r3, #3
 800751c:	d016      	beq.n	800754c <USBD_StdEPReq+0x150>
 800751e:	e04b      	b.n	80075b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <USBD_StdEPReq+0x146>
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d00a      	beq.n	8007542 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f833 	bl	800859c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f82f 	bl	800859c <USBD_LL_StallEP>
 800753e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007540:	e040      	b.n	80075c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc3e 	bl	8007dc6 <USBD_CtlError>
              break;
 800754a:	e03b      	b.n	80075c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	885b      	ldrh	r3, [r3, #2]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d136      	bne.n	80075c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f839 	bl	80085da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fcda 	bl	8007f22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fde2 	bl	800713c <USBD_CoreFindEP>
 8007578:	4603      	mov	r3, r0
 800757a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800757c:	7b7b      	ldrb	r3, [r7, #13]
 800757e:	2bff      	cmp	r3, #255	; 0xff
 8007580:	d01f      	beq.n	80075c2 <USBD_StdEPReq+0x1c6>
 8007582:	7b7b      	ldrb	r3, [r7, #13]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11c      	bne.n	80075c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007588:	7b7a      	ldrb	r2, [r7, #13]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007590:	7b7a      	ldrb	r2, [r7, #13]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32ae      	adds	r2, #174	; 0xae
 8007596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d010      	beq.n	80075c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075a0:	7b7a      	ldrb	r2, [r7, #13]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32ae      	adds	r2, #174	; 0xae
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075b6:	e004      	b.n	80075c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc03 	bl	8007dc6 <USBD_CtlError>
              break;
 80075c0:	e000      	b.n	80075c4 <USBD_StdEPReq+0x1c8>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e0ab      	b.n	800771e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d002      	beq.n	80075d8 <USBD_StdEPReq+0x1dc>
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d032      	beq.n	800763c <USBD_StdEPReq+0x240>
 80075d6:	e097      	b.n	8007708 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <USBD_StdEPReq+0x1f2>
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d004      	beq.n	80075ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fbed 	bl	8007dc6 <USBD_CtlError>
                break;
 80075ec:	e091      	b.n	8007712 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da0b      	bge.n	800760e <USBD_StdEPReq+0x212>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	3310      	adds	r3, #16
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	e00b      	b.n	8007626 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc37 	bl	8007ea8 <USBD_CtlSendData>
              break;
 800763a:	e06a      	b.n	8007712 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800763c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da11      	bge.n	8007668 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	3324      	adds	r3, #36	; 0x24
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d117      	bne.n	800768e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fbb0 	bl	8007dc6 <USBD_CtlError>
                  break;
 8007666:	e054      	b.n	8007712 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fb9d 	bl	8007dc6 <USBD_CtlError>
                  break;
 800768c:	e041      	b.n	8007712 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800768e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da0b      	bge.n	80076ae <USBD_StdEPReq+0x2b2>
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	3310      	adds	r3, #16
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	e00b      	b.n	80076c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	3304      	adds	r3, #4
 80076c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <USBD_StdEPReq+0x2d8>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d103      	bne.n	80076dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e00e      	b.n	80076fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ff99 	bl	8008618 <USBD_LL_IsStallEP>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2201      	movs	r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e002      	b.n	80076fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2202      	movs	r2, #2
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fbd1 	bl	8007ea8 <USBD_CtlSendData>
              break;
 8007706:	e004      	b.n	8007712 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb5b 	bl	8007dc6 <USBD_CtlError>
              break;
 8007710:	bf00      	nop
          }
          break;
 8007712:	e004      	b.n	800771e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb55 	bl	8007dc6 <USBD_CtlError>
          break;
 800771c:	bf00      	nop
      }
      break;
 800771e:	e005      	b.n	800772c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb4f 	bl	8007dc6 <USBD_CtlError>
      break;
 8007728:	e000      	b.n	800772c <USBD_StdEPReq+0x330>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	2b06      	cmp	r3, #6
 800775a:	f200 8128 	bhi.w	80079ae <USBD_GetDescriptor+0x276>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x2c>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007781 	.word	0x08007781
 8007768:	08007799 	.word	0x08007799
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080079af 	.word	0x080079af
 8007774:	080079af 	.word	0x080079af
 8007778:	0800794f 	.word	0x0800794f
 800777c:	0800797b 	.word	0x0800797b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
      break;
 8007796:	e112      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7c1b      	ldrb	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	f107 0208 	add.w	r2, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	2202      	movs	r2, #2
 80077b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077ba:	e100      	b.n	80079be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f107 0208 	add.w	r2, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	2202      	movs	r2, #2
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e0f2      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b05      	cmp	r3, #5
 80077e0:	f200 80ac 	bhi.w	800793c <USBD_GetDescriptor+0x204>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_GetDescriptor+0xb4>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007805 	.word	0x08007805
 80077f0:	08007839 	.word	0x08007839
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	080078d5 	.word	0x080078d5
 8007800:	08007909 	.word	0x08007909
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7c12      	ldrb	r2, [r2, #16]
 800781c:	f107 0108 	add.w	r1, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007826:	e091      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 facb 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	3301      	adds	r3, #1
 8007834:	72fb      	strb	r3, [r7, #11]
          break;
 8007836:	e089      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785a:	e077      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fab1 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
          break;
 800786a:	e06f      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7c12      	ldrb	r2, [r2, #16]
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788e:	e05d      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa97 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	3301      	adds	r3, #1
 800789c:	72fb      	strb	r3, [r7, #11]
          break;
 800789e:	e055      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	7c12      	ldrb	r2, [r2, #16]
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c2:	e043      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa7d 	bl	8007dc6 <USBD_CtlError>
            err++;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	3301      	adds	r3, #1
 80078d0:	72fb      	strb	r3, [r7, #11]
          break;
 80078d2:	e03b      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e029      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa63 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e021      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e00f      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa49 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e007      	b.n	800794c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa41 	bl	8007dc6 <USBD_CtlError>
          err++;
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	3301      	adds	r3, #1
 8007948:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800794a:	bf00      	nop
      }
      break;
 800794c:	e037      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007968:	e029      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa2a 	bl	8007dc6 <USBD_CtlError>
        err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	e021      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7c1b      	ldrb	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f107 0208 	add.w	r2, r7, #8
 800798e:	4610      	mov	r0, r2
 8007990:	4798      	blx	r3
 8007992:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	2207      	movs	r2, #7
 800799a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799c:	e00f      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa10 	bl	8007dc6 <USBD_CtlError>
        err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	e007      	b.n	80079be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa08 	bl	8007dc6 <USBD_CtlError>
      err++;
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	3301      	adds	r3, #1
 80079ba:	72fb      	strb	r3, [r7, #11]
      break;
 80079bc:	bf00      	nop
  }

  if (err != 0U)
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11e      	bne.n	8007a02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	88db      	ldrh	r3, [r3, #6]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d016      	beq.n	80079fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079cc:	893b      	ldrh	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00e      	beq.n	80079f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88da      	ldrh	r2, [r3, #6]
 80079d6:	893b      	ldrh	r3, [r7, #8]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bf28      	it	cs
 80079dc:	4613      	movcs	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079e2:	893b      	ldrh	r3, [r7, #8]
 80079e4:	461a      	mov	r2, r3
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa5d 	bl	8007ea8 <USBD_CtlSendData>
 80079ee:	e009      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9e7 	bl	8007dc6 <USBD_CtlError>
 80079f8:	e004      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa91 	bl	8007f22 <USBD_CtlSendStatus>
 8007a00:	e000      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    return;
 8007a02:	bf00      	nop
  }
}
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop

08007a0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d131      	bne.n	8007a82 <USBD_SetAddress+0x76>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d12d      	bne.n	8007a82 <USBD_SetAddress+0x76>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2c:	d829      	bhi.n	8007a82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d104      	bne.n	8007a50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9bc 	bl	8007dc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4e:	e01d      	b.n	8007a8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7bfa      	ldrb	r2, [r7, #15]
 8007a54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fe07 	bl	8008670 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa5d 	bl	8007f22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a76:	e009      	b.n	8007a8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	e004      	b.n	8007a8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f99e 	bl	8007dc6 <USBD_CtlError>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <USBD_SetConfig+0x150>)
 8007aaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007aac:	4b4d      	ldr	r3, [pc, #308]	; (8007be4 <USBD_SetConfig+0x150>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d905      	bls.n	8007ac0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f985 	bl	8007dc6 <USBD_CtlError>
    return USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e08c      	b.n	8007bda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d002      	beq.n	8007ad2 <USBD_SetConfig+0x3e>
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d029      	beq.n	8007b24 <USBD_SetConfig+0x90>
 8007ad0:	e075      	b.n	8007bbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ad2:	4b44      	ldr	r3, [pc, #272]	; (8007be4 <USBD_SetConfig+0x150>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d020      	beq.n	8007b1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ada:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <USBD_SetConfig+0x150>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	; (8007be4 <USBD_SetConfig+0x150>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe ffe7 	bl	8006abe <USBD_SetClassConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f962 	bl	8007dc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b0a:	e065      	b.n	8007bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa08 	bl	8007f22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2203      	movs	r2, #3
 8007b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b1a:	e05d      	b.n	8007bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa00 	bl	8007f22 <USBD_CtlSendStatus>
      break;
 8007b22:	e059      	b.n	8007bd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b24:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d112      	bne.n	8007b52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b3e:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe ffd6 	bl	8006af6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9e9 	bl	8007f22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b50:	e042      	b.n	8007bd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d02a      	beq.n	8007bb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe ffc4 	bl	8006af6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe ff9d 	bl	8006abe <USBD_SetClassConfig>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f918 	bl	8007dc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fe ffa9 	bl	8006af6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bac:	e014      	b.n	8007bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f9b7 	bl	8007f22 <USBD_CtlSendStatus>
      break;
 8007bb4:	e010      	b.n	8007bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9b3 	bl	8007f22 <USBD_CtlSendStatus>
      break;
 8007bbc:	e00c      	b.n	8007bd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f900 	bl	8007dc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <USBD_SetConfig+0x150>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7fe ff92 	bl	8006af6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd6:	bf00      	nop
  }

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200006c4 	.word	0x200006c4

08007be8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	88db      	ldrh	r3, [r3, #6]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d004      	beq.n	8007c04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f8e2 	bl	8007dc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c02:	e023      	b.n	8007c4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	dc02      	bgt.n	8007c16 <USBD_GetConfig+0x2e>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc03      	bgt.n	8007c1c <USBD_GetConfig+0x34>
 8007c14:	e015      	b.n	8007c42 <USBD_GetConfig+0x5a>
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d00b      	beq.n	8007c32 <USBD_GetConfig+0x4a>
 8007c1a:	e012      	b.n	8007c42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3308      	adds	r3, #8
 8007c26:	2201      	movs	r2, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f93c 	bl	8007ea8 <USBD_CtlSendData>
        break;
 8007c30:	e00c      	b.n	8007c4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3304      	adds	r3, #4
 8007c36:	2201      	movs	r2, #1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f934 	bl	8007ea8 <USBD_CtlSendData>
        break;
 8007c40:	e004      	b.n	8007c4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8be 	bl	8007dc6 <USBD_CtlError>
        break;
 8007c4a:	bf00      	nop
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d81e      	bhi.n	8007caa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	88db      	ldrh	r3, [r3, #6]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d004      	beq.n	8007c7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8a5 	bl	8007dc6 <USBD_CtlError>
        break;
 8007c7c:	e01a      	b.n	8007cb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f043 0202 	orr.w	r2, r3, #2
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f900 	bl	8007ea8 <USBD_CtlSendData>
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f88a 	bl	8007dc6 <USBD_CtlError>
      break;
 8007cb2:	bf00      	nop
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d107      	bne.n	8007cde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f923 	bl	8007f22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007cdc:	e013      	b.n	8007d06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d10b      	bne.n	8007cfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f913 	bl	8007f22 <USBD_CtlSendStatus>
}
 8007cfc:	e003      	b.n	8007d06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f860 	bl	8007dc6 <USBD_CtlError>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d80b      	bhi.n	8007d3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10c      	bne.n	8007d48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f8f3 	bl	8007f22 <USBD_CtlSendStatus>
      }
      break;
 8007d3c:	e004      	b.n	8007d48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f840 	bl	8007dc6 <USBD_CtlError>
      break;
 8007d46:	e000      	b.n	8007d4a <USBD_ClrFeature+0x3c>
      break;
 8007d48:	bf00      	nop
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fa41 	bl	8007204 <SWAPBYTE>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fa34 	bl	8007204 <SWAPBYTE>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fa27 	bl	8007204 <SWAPBYTE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	80da      	strh	r2, [r3, #6]
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fbe2 	bl	800859c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dd8:	2100      	movs	r1, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fbde 	bl	800859c <USBD_LL_StallEP>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d036      	beq.n	8007e6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e02:	6938      	ldr	r0, [r7, #16]
 8007e04:	f000 f836 	bl	8007e74 <USBD_GetLen>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	3301      	adds	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2203      	movs	r2, #3
 8007e30:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	3301      	adds	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e38:	e013      	b.n	8007e62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	4413      	add	r3, r2
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	613b      	str	r3, [r7, #16]
    idx++;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	4413      	add	r3, r2
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e7      	bne.n	8007e3a <USBD_GetString+0x52>
 8007e6a:	e000      	b.n	8007e6e <USBD_GetString+0x86>
    return;
 8007e6c:	bf00      	nop
  }
}
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e84:	e005      	b.n	8007e92 <USBD_GetLen+0x1e>
  {
    len++;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f5      	bne.n	8007e86 <USBD_GetLen+0x12>
  }

  return len;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fbed 	bl	80086ae <USBD_LL_Transmit>

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fbdc 	bl	80086ae <USBD_LL_Transmit>

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fbec 	bl	80086f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fbb8 	bl	80086ae <USBD_LL_Transmit>

  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2205      	movs	r2, #5
 8007f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fbc6 	bl	80086f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f74:	2200      	movs	r2, #0
 8007f76:	490e      	ldr	r1, [pc, #56]	; (8007fb0 <MX_USB_DEVICE_Init+0x40>)
 8007f78:	480e      	ldr	r0, [pc, #56]	; (8007fb4 <MX_USB_DEVICE_Init+0x44>)
 8007f7a:	f7fe fd23 	bl	80069c4 <USBD_Init>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f84:	f7f8 fd3e 	bl	8000a04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007f88:	490b      	ldr	r1, [pc, #44]	; (8007fb8 <MX_USB_DEVICE_Init+0x48>)
 8007f8a:	480a      	ldr	r0, [pc, #40]	; (8007fb4 <MX_USB_DEVICE_Init+0x44>)
 8007f8c:	f7fe fd4a 	bl	8006a24 <USBD_RegisterClass>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f96:	f7f8 fd35 	bl	8000a04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f9a:	4806      	ldr	r0, [pc, #24]	; (8007fb4 <MX_USB_DEVICE_Init+0x44>)
 8007f9c:	f7fe fd78 	bl	8006a90 <USBD_Start>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007fa6:	f7f8 fd2d 	bl	8000a04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007faa:	bf00      	nop
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200000c0 	.word	0x200000c0
 8007fb4:	200006c8 	.word	0x200006c8
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2212      	movs	r2, #18
 8007fcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fce:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	200000dc 	.word	0x200000dc

08007fe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2204      	movs	r2, #4
 8007ff0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ff2:	4b03      	ldr	r3, [pc, #12]	; (8008000 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	200000f0 	.word	0x200000f0

08008004 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d105      	bne.n	8008022 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4907      	ldr	r1, [pc, #28]	; (8008038 <USBD_FS_ProductStrDescriptor+0x34>)
 800801a:	4808      	ldr	r0, [pc, #32]	; (800803c <USBD_FS_ProductStrDescriptor+0x38>)
 800801c:	f7ff fee4 	bl	8007de8 <USBD_GetString>
 8008020:	e004      	b.n	800802c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4904      	ldr	r1, [pc, #16]	; (8008038 <USBD_FS_ProductStrDescriptor+0x34>)
 8008026:	4805      	ldr	r0, [pc, #20]	; (800803c <USBD_FS_ProductStrDescriptor+0x38>)
 8008028:	f7ff fede 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800802c:	4b02      	ldr	r3, [pc, #8]	; (8008038 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	200009a4 	.word	0x200009a4
 800803c:	08008868 	.word	0x08008868

08008040 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	4904      	ldr	r1, [pc, #16]	; (8008060 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008050:	4804      	ldr	r0, [pc, #16]	; (8008064 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008052:	f7ff fec9 	bl	8007de8 <USBD_GetString>
  return USBD_StrDesc;
 8008056:	4b02      	ldr	r3, [pc, #8]	; (8008060 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200009a4 	.word	0x200009a4
 8008064:	08008880 	.word	0x08008880

08008068 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	221a      	movs	r2, #26
 8008078:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800807a:	f000 f843 	bl	8008104 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800807e:	4b02      	ldr	r3, [pc, #8]	; (8008088 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	200000f4 	.word	0x200000f4

0800808c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d105      	bne.n	80080aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4907      	ldr	r1, [pc, #28]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080a2:	4808      	ldr	r0, [pc, #32]	; (80080c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a4:	f7ff fea0 	bl	8007de8 <USBD_GetString>
 80080a8:	e004      	b.n	80080b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4904      	ldr	r1, [pc, #16]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ae:	4805      	ldr	r0, [pc, #20]	; (80080c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080b0:	f7ff fe9a 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	200009a4 	.word	0x200009a4
 80080c4:	08008894 	.word	0x08008894

080080c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4907      	ldr	r1, [pc, #28]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080de:	4808      	ldr	r0, [pc, #32]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e0:	f7ff fe82 	bl	8007de8 <USBD_GetString>
 80080e4:	e004      	b.n	80080f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4904      	ldr	r1, [pc, #16]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080ec:	f7ff fe7c 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200009a4 	.word	0x200009a4
 8008100:	080088a0 	.word	0x080088a0

08008104 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <Get_SerialNum+0x44>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <Get_SerialNum+0x48>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008116:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <Get_SerialNum+0x4c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4413      	add	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800812a:	2208      	movs	r2, #8
 800812c:	4909      	ldr	r1, [pc, #36]	; (8008154 <Get_SerialNum+0x50>)
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f814 	bl	800815c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008134:	2204      	movs	r2, #4
 8008136:	4908      	ldr	r1, [pc, #32]	; (8008158 <Get_SerialNum+0x54>)
 8008138:	68b8      	ldr	r0, [r7, #8]
 800813a:	f000 f80f 	bl	800815c <IntToUnicode>
  }
}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	1fff7a10 	.word	0x1fff7a10
 800814c:	1fff7a14 	.word	0x1fff7a14
 8008150:	1fff7a18 	.word	0x1fff7a18
 8008154:	200000f6 	.word	0x200000f6
 8008158:	20000106 	.word	0x20000106

0800815c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
 8008172:	e027      	b.n	80081c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0f1b      	lsrs	r3, r3, #28
 8008178:	2b09      	cmp	r3, #9
 800817a:	d80b      	bhi.n	8008194 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0f1b      	lsrs	r3, r3, #28
 8008180:	b2da      	uxtb	r2, r3
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4619      	mov	r1, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	440b      	add	r3, r1
 800818c:	3230      	adds	r2, #48	; 0x30
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	e00a      	b.n	80081aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	0f1b      	lsrs	r3, r3, #28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	4619      	mov	r1, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	440b      	add	r3, r1
 80081a4:	3237      	adds	r2, #55	; 0x37
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	3301      	adds	r3, #1
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	4413      	add	r3, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	3301      	adds	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
 80081c4:	7dfa      	ldrb	r2, [r7, #23]
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d3d3      	bcc.n	8008174 <IntToUnicode+0x18>
  }
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081fc:	d132      	bne.n	8008264 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	4b1a      	ldr	r3, [pc, #104]	; (800826c <HAL_PCD_MspInit+0x90>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	4a19      	ldr	r2, [pc, #100]	; (800826c <HAL_PCD_MspInit+0x90>)
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	6313      	str	r3, [r2, #48]	; 0x30
 800820e:	4b17      	ldr	r3, [pc, #92]	; (800826c <HAL_PCD_MspInit+0x90>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800821a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800821e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008220:	2302      	movs	r3, #2
 8008222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008228:	2303      	movs	r3, #3
 800822a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800822c:	230a      	movs	r3, #10
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008230:	f107 0314 	add.w	r3, r7, #20
 8008234:	4619      	mov	r1, r3
 8008236:	480e      	ldr	r0, [pc, #56]	; (8008270 <HAL_PCD_MspInit+0x94>)
 8008238:	f7f8 fec0 	bl	8000fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <HAL_PCD_MspInit+0x90>)
 800823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <HAL_PCD_MspInit+0x90>)
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	6353      	str	r3, [r2, #52]	; 0x34
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <HAL_PCD_MspInit+0x90>)
 800824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008250:	4a06      	ldr	r2, [pc, #24]	; (800826c <HAL_PCD_MspInit+0x90>)
 8008252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008256:	6453      	str	r3, [r2, #68]	; 0x44
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <HAL_PCD_MspInit+0x90>)
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008264:	bf00      	nop
 8008266:	3728      	adds	r7, #40	; 0x28
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40023800 	.word	0x40023800
 8008270:	40020000 	.word	0x40020000

08008274 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fe fc4d 	bl	8006b2a <USBD_LL_SetupStage>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80082aa:	78fa      	ldrb	r2, [r7, #3]
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7fe fc87 	bl	8006bd4 <USBD_LL_DataOutStage>
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	334c      	adds	r3, #76	; 0x4c
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	4619      	mov	r1, r3
 80082f6:	f7fe fd20 	bl	8006d3a <USBD_LL_DataInStage>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fe54 	bl	8006fbe <USBD_LL_SOF>
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d001      	beq.n	8008336 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008332:	f7f8 fb67 	bl	8000a04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fdfe 	bl	8006f42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fda6 	bl	8006e9e <USBD_LL_Reset>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fdf9 	bl	8006f62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <HAL_PCD_SuspendCallback+0x48>)
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	4a03      	ldr	r2, [pc, #12]	; (80083a4 <HAL_PCD_SuspendCallback+0x48>)
 8008396:	f043 0306 	orr.w	r3, r3, #6
 800839a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	e000ed00 	.word	0xe000ed00

080083a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fde9 	bl	8006f8e <USBD_LL_Resume>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fe41 	bl	8007062 <USBD_LL_IsoOUTIncomplete>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	4611      	mov	r1, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fdfd 	bl	8006ffe <USBD_LL_IsoINIncomplete>
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fe53 	bl	80070c6 <USBD_LL_DevConnected>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fe50 	bl	80070dc <USBD_LL_DevDisconnected>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d13c      	bne.n	80084ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008454:	4a20      	ldr	r2, [pc, #128]	; (80084d8 <USBD_LL_Init+0x94>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <USBD_LL_Init+0x94>)
 8008460:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008464:	4b1c      	ldr	r3, [pc, #112]	; (80084d8 <USBD_LL_Init+0x94>)
 8008466:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800846a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800846c:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <USBD_LL_Init+0x94>)
 800846e:	2204      	movs	r2, #4
 8008470:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008472:	4b19      	ldr	r3, [pc, #100]	; (80084d8 <USBD_LL_Init+0x94>)
 8008474:	2202      	movs	r2, #2
 8008476:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <USBD_LL_Init+0x94>)
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800847e:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <USBD_LL_Init+0x94>)
 8008480:	2202      	movs	r2, #2
 8008482:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008484:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <USBD_LL_Init+0x94>)
 8008486:	2200      	movs	r2, #0
 8008488:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800848a:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <USBD_LL_Init+0x94>)
 800848c:	2200      	movs	r2, #0
 800848e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008490:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <USBD_LL_Init+0x94>)
 8008492:	2200      	movs	r2, #0
 8008494:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008496:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <USBD_LL_Init+0x94>)
 8008498:	2200      	movs	r2, #0
 800849a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <USBD_LL_Init+0x94>)
 800849e:	2200      	movs	r2, #0
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084a2:	480d      	ldr	r0, [pc, #52]	; (80084d8 <USBD_LL_Init+0x94>)
 80084a4:	f7fa fd3d 	bl	8002f22 <HAL_PCD_Init>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084ae:	f7f8 faa9 	bl	8000a04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	4808      	ldr	r0, [pc, #32]	; (80084d8 <USBD_LL_Init+0x94>)
 80084b6:	f7fb ff7c 	bl	80043b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084ba:	2240      	movs	r2, #64	; 0x40
 80084bc:	2100      	movs	r1, #0
 80084be:	4806      	ldr	r0, [pc, #24]	; (80084d8 <USBD_LL_Init+0x94>)
 80084c0:	f7fb ff30 	bl	8004324 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084c4:	2280      	movs	r2, #128	; 0x80
 80084c6:	2101      	movs	r1, #1
 80084c8:	4803      	ldr	r0, [pc, #12]	; (80084d8 <USBD_LL_Init+0x94>)
 80084ca:	f7fb ff2b 	bl	8004324 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000ba4 	.word	0x20000ba4

080084dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fa fe32 	bl	800315c <HAL_PCD_Start>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f930 	bl	8008764 <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	461a      	mov	r2, r3
 8008520:	4603      	mov	r3, r0
 8008522:	70fb      	strb	r3, [r7, #3]
 8008524:	460b      	mov	r3, r1
 8008526:	70bb      	strb	r3, [r7, #2]
 8008528:	4613      	mov	r3, r2
 800852a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800853a:	78bb      	ldrb	r3, [r7, #2]
 800853c:	883a      	ldrh	r2, [r7, #0]
 800853e:	78f9      	ldrb	r1, [r7, #3]
 8008540:	f7fb fb03 	bl	8003b4a <HAL_PCD_EP_Open>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f90a 	bl	8008764 <USBD_Get_USB_Status>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008554:	7bbb      	ldrb	r3, [r7, #14]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008578:	78fa      	ldrb	r2, [r7, #3]
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7fb fb4c 	bl	8003c1a <HAL_PCD_EP_Close>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f8eb 	bl	8008764 <USBD_Get_USB_Status>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008592:	7bbb      	ldrb	r3, [r7, #14]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fb fc0c 	bl	8003dd8 <HAL_PCD_EP_SetStall>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f8cc 	bl	8008764 <USBD_Get_USB_Status>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fb fc51 	bl	8003ea0 <HAL_PCD_EP_ClrStall>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f8ad 	bl	8008764 <USBD_Get_USB_Status>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800862a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0b      	bge.n	800864c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	333e      	adds	r3, #62	; 0x3e
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	e00b      	b.n	8008664 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	4613      	mov	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008662:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fb fa36 	bl	8003b00 <HAL_PCD_SetAddress>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f862 	bl	8008764 <USBD_Get_USB_Status>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
 80086ba:	460b      	mov	r3, r1
 80086bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086cc:	7af9      	ldrb	r1, [r7, #11]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	f7fb fb37 	bl	8003d44 <HAL_PCD_EP_Transmit>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f841 	bl	8008764 <USBD_Get_USB_Status>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	460b      	mov	r3, r1
 80086fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800870e:	7af9      	ldrb	r1, [r7, #11]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	f7fb facb 	bl	8003cae <HAL_PCD_EP_Receive>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f820 	bl	8008764 <USBD_Get_USB_Status>
 8008724:	4603      	mov	r3, r0
 8008726:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008728:	7dbb      	ldrb	r3, [r7, #22]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800873c:	4b03      	ldr	r3, [pc, #12]	; (800874c <USBD_static_malloc+0x18>)
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	200010b0 	.word	0x200010b0

08008750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]

}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d817      	bhi.n	80087a8 <USBD_Get_USB_Status+0x44>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <USBD_Get_USB_Status+0x1c>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	08008791 	.word	0x08008791
 8008784:	08008797 	.word	0x08008797
 8008788:	0800879d 	.word	0x0800879d
 800878c:	080087a3 	.word	0x080087a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]
    break;
 8008794:	e00b      	b.n	80087ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	73fb      	strb	r3, [r7, #15]
    break;
 800879a:	e008      	b.n	80087ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	e005      	b.n	80087ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	73fb      	strb	r3, [r7, #15]
    break;
 80087a6:	e002      	b.n	80087ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	bf00      	nop
  }
  return usb_status;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	4d0d      	ldr	r5, [pc, #52]	; (80087f4 <__libc_init_array+0x38>)
 80087c0:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c2:	1b64      	subs	r4, r4, r5
 80087c4:	10a4      	asrs	r4, r4, #2
 80087c6:	2600      	movs	r6, #0
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	4d0b      	ldr	r5, [pc, #44]	; (80087fc <__libc_init_array+0x40>)
 80087ce:	4c0c      	ldr	r4, [pc, #48]	; (8008800 <__libc_init_array+0x44>)
 80087d0:	f000 f83e 	bl	8008850 <_init>
 80087d4:	1b64      	subs	r4, r4, r5
 80087d6:	10a4      	asrs	r4, r4, #2
 80087d8:	2600      	movs	r6, #0
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	080088d0 	.word	0x080088d0
 80087f8:	080088d0 	.word	0x080088d0
 80087fc:	080088d0 	.word	0x080088d0
 8008800:	080088d4 	.word	0x080088d4

08008804 <memcmp>:
 8008804:	b510      	push	{r4, lr}
 8008806:	3901      	subs	r1, #1
 8008808:	4402      	add	r2, r0
 800880a:	4290      	cmp	r0, r2
 800880c:	d101      	bne.n	8008812 <memcmp+0xe>
 800880e:	2000      	movs	r0, #0
 8008810:	e005      	b.n	800881e <memcmp+0x1a>
 8008812:	7803      	ldrb	r3, [r0, #0]
 8008814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008818:	42a3      	cmp	r3, r4
 800881a:	d001      	beq.n	8008820 <memcmp+0x1c>
 800881c:	1b18      	subs	r0, r3, r4
 800881e:	bd10      	pop	{r4, pc}
 8008820:	3001      	adds	r0, #1
 8008822:	e7f2      	b.n	800880a <memcmp+0x6>

08008824 <memcpy>:
 8008824:	440a      	add	r2, r1
 8008826:	4291      	cmp	r1, r2
 8008828:	f100 33ff 	add.w	r3, r0, #4294967295
 800882c:	d100      	bne.n	8008830 <memcpy+0xc>
 800882e:	4770      	bx	lr
 8008830:	b510      	push	{r4, lr}
 8008832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800883a:	4291      	cmp	r1, r2
 800883c:	d1f9      	bne.n	8008832 <memcpy+0xe>
 800883e:	bd10      	pop	{r4, pc}

08008840 <memset>:
 8008840:	4402      	add	r2, r0
 8008842:	4603      	mov	r3, r0
 8008844:	4293      	cmp	r3, r2
 8008846:	d100      	bne.n	800884a <memset+0xa>
 8008848:	4770      	bx	lr
 800884a:	f803 1b01 	strb.w	r1, [r3], #1
 800884e:	e7f9      	b.n	8008844 <memset+0x4>

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
